{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"evaluateButtons(x, y, false, slot4)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"3"},"key":"0"},{"code":"evaluateButtons(x, y, true, slot4)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"3"},"key":"1"},{"code":"evaluateButtons(x, y, false, slot5)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"4"},"key":"2"},{"code":"evaluateButtons(x, y, true, slot5)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"4"},"key":"3"},{"code":"evaluateButtons(x, y, false, slot6)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"5"},"key":"4"},{"code":"evaluateButtons(x, y, true, slot6)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"5"},"key":"5"},{"code":"update3d(true)\nupdateButtons(true)","filter":{"args":[{"value":"spacemap"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"6"},{"code":"mapRotate()","filter":{"args":[{"value":"maprotate"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"7"},{"code":"\nbackGroundColor = \"2C3735\" --export: Defines main background color. Default: 2C3735\nbackGroundColor = \"#\"..backGroundColor\n\npathColor = \"5c58b6\" --export: Defines travel path line color. Default: 5c58b6\npathColor = \"#\"..pathColor\n\nplanetOffsetColor = \"D7F4FA\" --export: Defines planet offset color. Default: D7F4FA\nplanetOffsetColor = \"#\"..planetOffsetColor\n\nbuttonBorderColor = \"dfdfdf\" --export: Defines button border color. Default: dfdfdf\nbuttonBorderColor = \"#\"..buttonBorderColor\n\nbuttonBInactiveColor = \"4B4B4B\" --export: Defines inactive button background color. Default: 4B4B4B\nbuttonBInactiveColor = \"#\"..buttonBInactiveColor\n\nbuttonTInactiveColor = \"d2d1d1\" --export: Defines inactive button text color. Default: d2d1d1\nbuttonTInactiveColor = \"#\"..buttonTInactiveColor\n\nbuttonBActiveColor = \"c5c5c5\" --export: Defines inactive button background color. Default: c5c5c5\nbuttonBActiveColor = \"#\"..buttonBActiveColor\n\nbuttonTActiveColor = \"515151\" --export: Defines active button text color. Default: 515151\nbuttonTActiveColor = \"#\"..buttonTActiveColor\n\nbuttonTWarpInactiveColor = \"D0AF40\" --export: Defines set warp planet color. Default: D0AF40\nbuttonTWarpInactiveColor = \"#\"..buttonTWarpInactiveColor\nbuttonTWarpActiveColor = \"756326\" --export: Defines set warp active planet color. Default: 756326\nbuttonTWarpActiveColor = \"#\"..buttonTWarpActiveColor\n\nmapCircleColor = \"00eaff\" --export: Defines circle front color. Default: 00eaff\nmapCircleColor = \"#\"..mapCircleColor\nmapBCircleColor = \"ffffff\" --export: Defines circle back color. Default: ffffff\nmapBCircleColor = \"#\"..mapBCircleColor\nmapCircleThickness = 0.5 --export: Defines circle thickness. Default: 0.5\nmapCircleThickness =  mapCircleThickness..\"em\"\n\nmapConstructColor = \"24ff00\" --export: Defines current position color. Default: 24ff00\nmapConstructColor = \"#\"..mapConstructColor\nmapConstructSColor = \"404040\" --export: Defines current position stroke color. Default: 404040\nmapConstructSColor = \"#\"..mapConstructSColor\n\n\nplanetColor = \"0\" --export: Defines planet colors. Set to 0 for colorized ones. Default: 0\nplanetColor = \"#\"..planetColor\n\n\nplanetEdgeColor = \"4b4b4b\" --export: Defines planets edge color. Default: 4b4b4b\nplanetEdgeColor = \"#\"..planetEdgeColor\n\n\nplanetNameColor = \"ffffff\" --export: Defines planet name color. Default: ffffff\nplanetNameColor = \"#\"..planetNameColor\n\nminiTextColor = \"dfdfdf\" --export: Defines planet name color. Default: dfdfdf\nminiTextColor = \"#\"..miniTextColor\n\nwarpCostColor = \"0\" --export: Defines warp cost color. Set to 0 for colorized ones. Default: 0\nwarpCostColor = \"#\"..warpCostColor\n\nzoomScale = 1.5 --export: Defines map scale in full screen mode. Default: 1.5\n\nbuttonHeight = 40\nbuttonWidth = 333\nbuttonSpacing = 3\nbuttonStroke = 2\nbuttonStrokeHalf = buttonStroke / 2\n\nscreenHeight = 612\nscreenWidth = 1024\n\nradarScale = 110\nradarFullScreenScale = 50\n\nscreens = {}\ndatabank = nill\nwarpdrive = nill\ncore = nill\n\nwarpDriveDestinationPlanet = nill\n\nupdateInterval = 1\nupdateMouseInterval = 0.05\n\nfunction Split(s, delimiter)\n\tresult = {};\n\tfor match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n\t\ttable.insert(result, match);\n\tend\n\treturn result;\nend\n\nfunction initializeScreen(key, screenUnit)\n\treturn {\n\t\tscreen = screenUnit,\n\t\tid = screenUnit.getId(),\n\t\tslot = key,\n\t\tangle = -1,\n\t\tpitch = 0,\n\t\tyaw = 0,\n\t\tscale =  1,\n\t\tmapCenterPoint = {x = 0, y = 0, z = 0},\n\t\tscreenCenterX = screenWidth / 2,\n\t\tscreenCenterY = screenHeight - (screenHeight / 3),\n\t\tmapViewState = 1,\n\t\textraWeight = 0,\n\t\tweightButtonClicked = nill,\n\t\ttimer = 0,\n\t\tchangeView = true,\n\t\tmouseDown = false,\n\t\tselectedPlanet = nill}\nend\n\nfor key, value in pairs(unit) do\n\tif type(value) == \"table\" and type(value.export) == \"table\" then\n\t\tif value.getElementClass then\n\t\t\tif value.getElementClass() == \"ScreenUnit\" then\n\t\t\t\tscreens[#screens + 1] = initializeScreen(key, value)\n\t\t\telseif value.getElementClass() == \"DataBankUnit\" then\n\t\t\t\tdatabank = value\n\t\t\telseif value.getElementClass() == \"WarpDriveUnit\" then\n\t\t\t\twarpdrive = value\n\t\t\telseif value.getElementClass() == \"CoreUnitDynamic\" then\n\t\t\t\tcore = value\n\t\t\telseif value.getElementClass() == \"CoreUnitStatic\" then\n\t\t\t\tcore = value\n\t\t\tend\n\n\t\tend\n\tend\nend\n\nfunction split(s, delimiter)\n\tresult = {};\n\tfor match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n\t\ttable.insert(result, match);\n\tend\n\treturn result;\nend\n\nshipWeight = 0\n\nif databank then\n\tfor _,key in ipairs(json.decode(databank.getKeys())) do\n\t\tvalue = databank.getFloatValue(key)\n\n\t\tif key == \"shipWeight\" then\n\t\t\tshipWeight = value\n\t\tend\n\n\t\tfor _,screenObject in ipairs(screens) do\n\t\t\tif string.match(key, screenObject.slot) then\n\n\t\t\t\tsplitted = split(key, \"_\")\n\t\t\t\tlastPart = splitted[#splitted]\n\n\t\t\t\tif lastPart == \"angle\" then\n\t\t\t\t\tscreenObject.angle = value\n\t\t\t\telseif lastPart == \"pitch\" then\n\t\t\t\t\tscreenObject.pitch = value\n\t\t\t\telseif lastPart == \"yaw\" then\n\t\t\t\t\tscreenObject.yaw = value\n\t\t\t\telseif lastPart == \"state\" then\n\t\t\t\t\tscreenObject.mapViewState = value\n\t\t\t\telseif lastPart == \"weight\" then\n\t\t\t\t\tshipWeight = value\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend\n\nfunction save(screenObject)\n\tif databank then\n\t\tdatabank.setFloatValue(screenObject.slot..\"_angle\", screenObject.angle)\n\t\tdatabank.setFloatValue(screenObject.slot..\"_pitch\", screenObject.pitch)\n\t\tdatabank.setFloatValue(screenObject.slot..\"_yaw\", screenObject.yaw)\n\t\tdatabank.setFloatValue(screenObject.slot..\"_state\", screenObject.mapViewState)\n\tend\nend\n\nfunction saveAll()\n\tif databank then\n\t\tdatabank.clear()\n\t\tfor _,screenObject in ipairs(screens) do\n\t\t\tsave(screenObject)\n\t\tend\n\t\tdatabank.setFloatValue(\"shipWeight\", math.floor(core.getConstructMass()/ 1000))\n\tend\nend\n\nweightScreenButtons = {}\n\nlocal amountButton = {id = #weightScreenButtons, width = 100, y=screenHeight-buttonHeight-buttonSpacing, x=screenWidth - 100 -10, change = 100}\ntable.insert(weightScreenButtons, amountButton)\nlocal amountButton = {id = #weightScreenButtons, width = 80, y=amountButton.y, x=amountButton.x- 80 -3, change = 10}\ntable.insert(weightScreenButtons, amountButton)\nlocal amountButton = {id = #weightScreenButtons, width = 70, y=amountButton.y, x=amountButton.x- 70 -3, change = -10}\ntable.insert(weightScreenButtons, amountButton)\nlocal amountButton = {id = #weightScreenButtons, width = 90, y=amountButton.y, x=amountButton.x- 90 -3, change = -100}\ntable.insert(weightScreenButtons, amountButton)\n\nfunction getMoonsCount(planet)\n\tcounter = \"\"\n\tfor index in pairs(planet.moons) do\n\t\tcounter = counter..\"*\"\n\tend\n\treturn counter\nend\n\nfunction formatPlanetName(planet)\n\treturn planet.name..getMoonsCount(planet)\nend\n\nfunction mapX(planet)\n\treturn planet.center.x/400000\nend\n\nfunction mapY(planet)\n\treturn (planet.center.y/400000)\nend\n\nfunction mapZ(planet)\n\treturn (planet.center.z)/400000\nend\n\nplanets = {}\n\n-- creating planet button and assingning it to planet object\nfunction addPlanetButton(planet, buttonX, buttonY)\n\tbutton = {id = #planets + 1, planet = planet, name = formatPlanetName(planet), x=buttonX, y=buttonY}\n\tplanet.button = button\n\tplanet.mapCoords = {x = mapX(planet),y = mapY(planet), z = mapZ(planet)}\n\tplanet.fullname = planet.name\n\ttable.insert(planets, planet)\nend\n\n-- Moons\n-- Madis\nlocal MadisMoon1 = {name = \"Moon 1\", center = vec3(17448118.224,22966846.286,143078.820), radius = 10000}\nlocal MadisMoon2 = {name = \"Moon 2\", center = vec3(17194626.000,22243633.880,-214962.810), radius = 11000}\nlocal MadisMoon3 = {name = \"Moon 3\", center = vec3(17520614.000,22184730.000,-309989.990), radius = 15005}\n\n-- Alioth\nlocal AliothMoon1 = {name = \"Moon 1\", center = vec3(457933.000,-1509011.000,115524.000), radius = 30000}\nlocal AliothMoon4 = {name = \"Moon 4\", center = vec3(-1692694.000,729681.000,-411464.000), radius = 30330}\nlocal Sanctuary = {name = \"Sanctuary\", center = vec3(-1404835.000,562655.000,-285074.000), radius = 83400}\n\n-- Thades\nlocal ThadesMoon1 = {name = \"Moon 1\",center = vec3(29214402.000,10907080.695,433858.200), radius = 14002}\nlocal ThadesMoon2 = {name = \"Moon 2\",center = vec3(29404193.000,10432768.000,19554.131), radius = 15000}\n\n-- Talemai\nlocal TalemaiMoon1 = {name = \"Moon 1\",center = vec3(-13058408.000,55781856.000,740177.760), radius = 15000}\nlocal TalemaiMoon2 = {name = \"Moon 2\",center = vec3(-13503090.000,55594325.000,769838.640), radius = 12000}\nlocal TalemaiMoon3 = {name = \"Moon 3\",center = vec3(-12800515.000,55700259.000,325207.840), radius = 11000}\n\n-- Feli\nlocal FeliMoon1 = {name = \"Moon 1\",center = vec3(-43902841.780,22261034.700,-48862386.000), radius = 14000}\n\n-- Sinnen\nlocal SinnenMoon1 = {name = \"Moon 1\",center = vec3(58969616.000,29797945.000,57969449.000), radius = 17000}\n\n-- Lacobus\nlocal LacobusMoon1 = {name = \"Moon 1\",center = vec3(99180968.000,-13783862.000,-926156.400), radius = 18000}\nlocal LacobusMoon2 = {name = \"Moon 2\",center = vec3(99250052.000,-13629215.000,-1059341.400), radius = 14000}\nlocal LacobusMoon3 = {name = \"Moon 3\",center = vec3(98905288.170,-13950921.100,-647589.530), radius = 15000}\n\n-- Ion\nlocal IonMoon1 = {name = \"Moon 1\",center = vec3(2472916.800,-99133747.000,-1133582.800), radius = 11000}\nlocal IonMoon2 = {name = \"Moon 2\",center = vec3(2995424.500,-99275010.000,-1378480.700), radius = 15000}\n\n-- Planets\nlocal ion = {name = \"Ion\", center = vec3(2995424.500,-99275010.000,-1378480.700), radius = 44950, color = \"#9fc1df\", moons = {IonMoon1, IonMoon2}}\nlocal thades = {name = \"Thades\", center = vec3(29165536.000, 10865536.000, 65536.000), radius = 49000, color = \"#da985f\", moons = {ThadesMoon1, ThadesMoon2}}\nlocal sinnen = {name = \"Sinnen\", center = vec3(58665536.000, 29665536.000, 58165536.000), radius = 54950, color = \"#d0885b\", moons = {SinnenMoon1}, drawZero = true}\nlocal alioth = {name = \"Alioth\", center = vec3(-8.000, -8.000, -126303.000), radius = 126068, color = \"#4d5861\", moons = {AliothMoon1, AliothMoon4, Sanctuary}}\nlocal madis = {name = \"Madis\", center = vec3(17465536.000, 22665536.000, -34464.000), radius = 44300, color = \"#777bbf\", moons = {MadisMoon1, MadisMoon2, MadisMoon3}}\nlocal jago = {name = \"Jago\", center = vec3(-94134464.000, 12765536.000, -3634464.000), radius = 61590, color = \"#36444f\", moons = {}}\nlocal symeon = {name = \"Symeon\", center = vec3(14165536.000, -85634464.000, -934464.000), radius = 49050, color = \"#cad1d9\", moons = {}}\nlocal lacobus = {name = \"Lacobus\", center = vec3(98865536.000, -13534464.000, -934464.000), radius = 55650, color = \"#deedf9\", moons = {LacobusMoon1, LacobusMoon2, LacobusMoon3}}\nlocal teoma = {name = \"Teoma\", center = vec3(80865536.000, 54665536.000, -934464.000), radius = 62000, color = \"#3e5268\", moons = {}}\nlocal feli = {name = \"Feli\", center = vec3(-43534464.000, 22565536.000, -48934464.000), radius = 60000, color = \"#928370\", moons = {FeliMoon1}, drawZero = true}\nlocal talemai = {name = \"Talemai\", center = vec3(-13234464.000, 55765536.000, 465536.000), radius = 57450, color = \"#929482\", moons = {TalemaiMoon1, TalemaiMoon2, TalemaiMoon3}}\nlocal sicari = {name = \"Sicari\",center = vec3(52765536.000, 27165536.000, 52065536.000), radius = 51100, color = \"#b78a64\", moons = {}, drawZero = true}\n\n-- adding planets and setting their button positions\naddPlanetButton(alioth, 10, 10)\naddPlanetButton(madis, 10, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(thades, 10, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(talemai, 10, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\n\naddPlanetButton(feli, button.x+(buttonWidth+buttonSpacing+buttonStrokeHalf), 10)\naddPlanetButton(sicari, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(symeon, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(sinnen, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\n\naddPlanetButton(jago, button.x+(buttonWidth+buttonSpacing+buttonStrokeHalf), 10)\naddPlanetButton(teoma, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(ion, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(lacobus, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\n\nbuttonLowY = button.y\n\n-- creating moon buttons\nplace = 1\nfor i, planet in ipairs(planets) do\n\tif #planet.moons > 0 then\n\t\tshift = 1\n\t\textraX = -(buttonWidth+buttonSpacing+buttonStrokeHalf)\n\t\tif #planet.moons == 1 then\n\t\t\textraX = extraX + (buttonWidth+buttonSpacing+buttonStrokeHalf)\n\t\telseif #planet.moons == 2 then\n\t\t\textraX = extraX + (buttonWidth+buttonSpacing+buttonStrokeHalf) / 2\n\t\tend\n\t\tfor y, moon in ipairs(planet.moons) do\n\t\t\tys = buttonLowY+(buttonHeight+buttonSpacing+buttonStrokeHalf)\n\t\t\txs = 10 + (shift * (buttonWidth+buttonSpacing+buttonStrokeHalf)) + extraX\n\t\t\tlocal button = {id = y, planet = moon, name = planet.name..\" \"..moon.name,  y=ys, x=xs}\n\t\t\tmoon.button = button\n\t\t\tmoon.sourcePlanet = planet\n\t\t\tmoon.mapCoords = {x = mapX(moon),y = mapY(moon), z = mapZ(moon)}\n\t\t\tmoon.fullname = planet.fullname..\" \"..moon.name\n\t\t\tshift = shift + 1\n\t\tend\n\tend\nend\n\nmapSize = 100\n\nstyle = [[<style>.circle {stroke: ]]..planetEdgeColor..[[;stroke-width: 0.3em;stroke-opacity: 0.9;fill-opacity: 0;}.planet {stroke: black;stroke-width: 1;}text {font-family: Arial,sans-serif, Helvetica;stroke-width: 0;font-weight: bold;}.btext {font-size: 4em;}.bdtext {font-size: 2.5em;text-anchor: end;}.minitext {fill: ]]..planetNameColor..[[;}.mediumtext {fill: white;font-size: 2.8em;fill: ]]..miniTextColor..[[;}</style>]]\n\n\nfunction matmul(projection, vector)\n\tx = (projection[1][1] * vector.x) + (projection[1][2] * vector.y) + (projection[1][3] * vector.z)\n\ty = (projection[2][1] * vector.x) + (projection[2][2] * vector.y) + (projection[2][3] * vector.z)\n\tz = (projection[3][1] * vector.x) + (projection[3][2] * vector.y) + (projection[3][3] * vector.z)\n\treturn {x = x, y = y, z = z}\nend\n\nfunction compare(a,b)\n\treturn a.z > b.z\nend\n\norDistance = 200\n\nfunction toScreenCordsX(value)\n\tif value == nill then\n\t\treturn 0\n\tend\n\treturn value * 100 / screenWidth\nend\n\nfunction toScreenCordsY(value)\n\tif value == nill then\n\t\treturn 0\n\tend\n\treturn value * 100 / screenHeight\nend\n\nfunction toScreenCords(value)\n\tif value == nill then\n\t\treturn 0\n\tend\n\treturn value * 100 / screenWidth\nend\n\nfunction planetByName(name)\n\tfor i, planet in ipairs(planets) do\n\t\tif planet.name == name then\n\t\t\treturn planet\n\t\tend\n\t\tif planet.moons ~= nill then\n\t\t\tfor y, moon in ipairs(planet.moons) do\n\t\t\t\t-- checking by formatted moon name which includes planet name\n\t\t\t\tif moon.button.name == name then\n\t\t\t\t\treturn moon\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn nill\nend\n\nfunction getSuDistance(center)\n\treturn tonumber(string.format(\"%.2f\", math.sqrt((globalLoc.x-center.x)^2+(globalLoc.y-center.y)^2+(globalLoc.z-center.z)^2)/200000))\nend\n\nfunction getSuDistancePoints(fromVector, center)\n\treturn tonumber(string.format(\"%.2f\", math.sqrt((fromVector.x-center.x)^2+(fromVector.y-center.y)^2+(fromVector.z-center.z)^2)/200000))\nend\n\nfunction getRoute(toPlanet)\n\n\tdistance = getSuDistance(toPlanet.center)\n\tif distance <= 500 then\n\t\treturn {toPlanet}\n\tend\n\n\tprimary = {}\n\n\tfor i, planet in ipairs(planets) do\n\t\tdistance = getSuDistance(planet.center)\n\t\tif distance <= 500 then\n\t\t\ttable.insert(primary, planet)\n\t\tend\n\n\t\tfor i, moon in ipairs(planet.moons) do\n\t\t\tdistance = getSuDistance(moon.center)\n\t\t\tif distance <= 500 then\n\t\t\t\ttable.insert(primary, moon)\n\t\t\tend\n\t\tend\n\tend\n\n\n\n\tlocal newDistance = 400000\n\tlocal endPlanets = {}\n\n\tfor i, primaryPlanet in ipairs(primary) do\n\t\tdistance = getSuDistancePoints(primaryPlanet.center, toPlanet.center)\n\t\tif distance <= 500 then\n\t\t\ttotal = (getSuDistance(primaryPlanet.center)+distance)\n\t\t\tif total < newDistance then\n\t\t\t\tnewDistance = total\n\t\t\t\tendPlanets[1] = primaryPlanet\n\t\t\t\tendPlanets[2] = toPlanet\n\t\t\tend\n\t\tend\n\tend\n\treturn endPlanets, newDistance\nend\n\nfunction convertTime(t)\n\tif t == nil then\n\t\treturn \"\"\n\tend\n\thours = 0\n\tminutes = t\n\tseconds = 0\n\tif t > 60 then\n\t\thours = math.floor(t / 60)\n\tend\n\n\tif (hours > 24) then\n\t\treturn \"-\"\n\tend\n\n\n\tif hours > 0 then\n\t\tminutes =  math.floor(t - (hours * 60))\n\telse\n\t\tminutes =  math.floor(t)\n\tend\n\n\tseconds = (t - (hours * 60) - minutes)\n\tseconds = math.floor(seconds * 60)\n\n\tendText = minutes..\"min \"..seconds..\"sec\"\n\tif hours > 0 then\n\t\tendText =  hours..\"h \"..endText\n\tend\n\treturn endText\nend\n\nupdateCounter = 30\n\nfunction update(auto)\n\tupdateCounter = updateCounter + 1\n\tif auto and updateCounter < 1 / updateInterval then\n\t\treturn\n\tend\nend\n\nfunction updateButtons(auto)\n\n\tupdateCounter = updateCounter + 1\n\n\tif auto and updateCounter < 1 / updateInterval then\n\t\treturn\n\tend\n\n\tupdateCounter = 0\n\n\tif warpdrive then\n\t\tlocal decoded = json.decode(warpdrive.getData())\n\t\tlocal warpDriveDestination = decoded.destination\n\n\t\tif warpDriveDestination == \"Sanctuary\" then\n\t\t\twarpDriveDestination = \"Alioth \"..warpDriveDestination;\n\t\tend\n\n\t\tif warpDriveDestinationPlanet == nill or warpDriveDestinationPlanet.fullname ~= warpDriveDestination then\n\n\n\t\t\twarpDriveDestinationPlanet = planetByName(warpDriveDestination)\n\n\n\t\t\tif warpDriveDestinationPlanet ~= nill then\n\n\t\t\t\tfor _,screenObject in ipairs(screens) do\n\t\t\t\t\tscreenObject.selectedPlanet = warpDriveDestinationPlanet\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\twarpDriveCells =  tonumber(Split(decoded.cellCount, \" / \")[1])\n\tend\n\n\tif core then\n\t\tshipVelocity = vec3(core.getVelocity()):len() * 3.6\n\tend\n\n\tconstructWeight = math.ceil(core.getConstructMass() / 1000)\n\n\tif constructWeight == 0 and shipWeight ~= 0 then\n\t\tconstructWeight = shipWeight\n\tend\n\n\tfor _,screenObject in ipairs(screens) do\n\n\t\tlocal selectedPlanet = screenObject.selectedPlanet\n\n\t\tif selectedPlanet == nill and warpDriveDestinationPlanet ~= nill then\n\t\t\tscreenObject.selectedPlanet = warpDriveDestinationPlanet\n\t\t\tselectedPlanet = warpDriveDestinationPlanet\n\t\tend\n\n\t\tif selectedPlanet == nill then\n\t\t\tcalculatedDist = 0\n\t\telse\n\t\t\tcalculatedDist = getSuDistance(selectedPlanet.center)\n\t\tend\n\n\n\t\tif calculatedDist > 500 then\n\t\t\tscreenObject.route, calculatedDist = getRoute(selectedPlanet)\n\t\t\tnewDistance = calculatedDist\n\t\telse\n\t\t\tscreenObject.route = {selectedPlanet}\n\t\tend\n\n\n\n\t\tif core then\n\t\t\twarpmath = math.floor((constructWeight  * calculatedDist * 0.00025)+0.5)\n\t\t\twarpmathBack = math.floor(((constructWeight+screenObject.extraWeight)  * calculatedDist * 0.00025)+0.5)\n\t\t\tif constructWeight+screenObject.extraWeight < 0 then\n\t\t\t\tscreenObject.extraWeight = -constructWeight\n\t\t\tend\n\t\telse\n\t\t\twarpmath = 0\n\t\t\twarpmathBack = 0\n\t\tend\n\n\n\t\tapproxSpeed = \"\"\n\t\tpredictedSpeed = shipVelocity\n\t\tif shipVelocity <= 100 then\n\t\t\tapproxSpeed = \"*\"\n\t\t\tif calculatedDist < 3 then\n\t\t\t\tpredictedSpeed = 8000\n\t\t\telseif calculatedDist < 10  then\n\t\t\t\tpredictedSpeed = 10000\n\t\t\telseif calculatedDist < 20  then\n\t\t\t\tpredictedSpeed = 20000\n\t\t\telse\n\t\t\t\tpredictedSpeed = 29900\n\t\t\tend\n\t\tend\n\n\t\tshipVelocityFormat = string.format(\"%.0f\", predictedSpeed)\n\n\n\t\ttime_to_distance = string.format(\"%.2f\", calculatedDist * 200 / ( predictedSpeed ) * 60)\n\t\tdist = string.format(\"%.0f\", calculatedDist * 200)\n\n\n\n\t\thtml = [[<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 ]]..screenWidth..[[ ]]..screenHeight..[[\">]]\n\n\t\tif screenObject.mapViewState == 1 then\n\t\t\tfor i, planet in ipairs(planets) do\n\t\t\t\ttextColor = buttonTInactiveColor\n\t\t\t\tbackColor = buttonBInactiveColor\n\n\t\t\t\tif (screenObject.selectedPlanet == planet or screenObject.selectedPlanet ~=nill and screenObject.selectedPlanet.sourcePlanet == planet) then\n\t\t\t\t\ttextColor = buttonTActiveColor\n\t\t\t\t\tbackColor = buttonBActiveColor\n\t\t\t\tend\n\n\n\n\t\t\t\tif (warpDriveDestinationPlanet ~= nill and (warpDriveDestinationPlanet == planet or warpDriveDestinationPlanet.sourcePlanet == planet)) then\n\t\t\t\t\ttextColor = buttonTWarpInactiveColor\n\t\t\t\t\tif (screenObject.selectedPlanet == planet or screenObject.selectedPlanet.sourcePlanet == planet) then\n\t\t\t\t\t\ttextColor = buttonTWarpActiveColor\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tdistanceToPlanet = getSuDistance(planet.center)\n\n\t\t\t\thtml = html..[[<rect rx=\"0\" height=\"]]..buttonHeight..[[\" width=\"]]..buttonWidth..[[\" y=\"]]..planet.button.y..[[\" x=\"]]..planet.button.x..[[\" stroke-width=\"]]..buttonStroke..[[\" stroke=\"]]..buttonBorderColor..[[\" fill=\"]]..backColor..[[\"/>]]\n\t\t\t\thtml = html..[[<text class=\"btext\" y=\"]]..(planet.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(planet.button.x+10)..[[\" fill=\"]]..textColor..[[\">]]..planet.button.name..[[</text>]]\n\t\t\t\thtml = html..[[<text class=\"bdtext\" y=\"]]..(planet.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(planet.button.x-10+buttonWidth)..[[\" fill=\"]]..textColor..[[\">]]..string.format(\"%.1f\", distanceToPlanet)..[[</text>]]\n\t\t\tend\n\n\t\t\tif screenObject.selectedPlanet ~= nill then\n\n\t\t\t\tmoons = screenObject.selectedPlanet.moons\n\n\t\t\t\tif screenObject.selectedPlanet.sourcePlanet ~= nill then\n\t\t\t\t\tmoons = screenObject.selectedPlanet.sourcePlanet.moons\n\t\t\t\telse\n\t\t\t\t\tmoons = screenObject.selectedPlanet.moons\n\t\t\t\tend\n\n\t\t\t\tfor i, moon in ipairs(moons) do\n\n\t\t\t\t\ttextColor = buttonTInactiveColor\n\t\t\t\t\tbackColor = \"#333333\"\n\t\t\t\t\tif (screenObject.selectedPlanet == moon) then\n\t\t\t\t\t\ttextColor = buttonTActiveColor\n\t\t\t\t\t\tbackColor = \"#97a9a6\"\n\t\t\t\t\tend\n\n\t\t\t\t\tif (warpDriveDestinationPlanet == moon) then\n\t\t\t\t\t\ttextColor = buttonTWarpInactiveColor\n\t\t\t\t\t\tif (screenObject.selectedPlanet == moon) then\n\t\t\t\t\t\t\ttextColor = buttonTWarpActiveColor\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\n\t\t\t\t\tcalculatedDist = getSuDistance(moon.center)\n\n\t\t\t\t\thtml = html..[[<rect rx=\"0\" height=\"]]..buttonHeight..[[\" width=\"]]..buttonWidth..[[\" y=\"]]..(moon.button.y)..[[\" x=\"]]..(moon.button.x)..[[\" stroke-width=\"]]..buttonStroke..[[\" stroke=\"]]..buttonBorderColor..[[\" fill=\"]]..backColor..[[\"/>]]\n\t\t\t\t\thtml = html..[[<text class=\"btext\" y=\"]]..(moon.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(moon.button.x+10)..[[\" fill=\"]]..textColor..[[\">]]..moon.name..[[</text>]]\n\t\t\t\t\thtml = html..[[<text class=\"bdtext\" y=\"]]..(moon.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(moon.button.x-10+buttonWidth)..[[\" fill=\"]]..textColor..[[\">]]..string.format(\"%.1f\", calculatedDist)..[[</text>]]\n\n\t\t\t\tend\n\t\t\tend\n\n\n\t\t\ttextColor = buttonTInactiveColor\n\n\t\t\tfor i, button in ipairs(weightScreenButtons) do\n\n\t\t\t\tbackColor = buttonBInactiveColor\n\t\t\t\tif screenObject.weightButtonClicked == button and screenObject.mouseDown then\n\t\t\t\t\tbackColor = \"#30786B\"\n\t\t\t\tend\n\n\t\t\t\thtml = html..[[<rect rx=\"0\" height=\"]]..buttonHeight..[[\" width=\"]]..button.width..[[\" y=\"]]..button.y..[[\" x=\"]]..button.x..[[\" stroke-width=\"]]..buttonStroke..[[\" stroke=\"]]..buttonBorderColor..[[\" fill=\"]]..backColor..[[\"/>]]\n\n\t\t\t\tchange = button.change\n\t\t\t\tif change > 0 then\n\t\t\t\t\tchange = \"+\"..change\n\t\t\t\tend\n\t\t\t\thtml = html..[[<text class=\"btext\" y=\"]]..(button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(button.x+5)..[[\" fill=\"]]..textColor..[[\">]]..change..[[</text>]]\n\t\t\tend\n\t\tend\n\n\t\ttotalCells = warpmath+warpmathBack\n\n\n\t\tif string.len(warpCostColor) < 3 then\n\t\t\twrpCostColor = \"#9cfd80\"\n\n\t\t\tif warpDriveCells ~= nill then\n\t\t\t\tif totalCells <= warpDriveCells - 10 then\n\t\t\t\t\twrpCostColor = \"#08f600\"\n\t\t\t\telseif totalCells >= warpDriveCells - 2 and totalCells < warpDriveCells then\n\t\t\t\t\twrpCostColor = \"#ceffc0\"\n\t\t\t\telseif totalCells == warpDriveCells then\n\t\t\t\t\twrpCostColor = \"#fcfd80\"\n\t\t\t\telseif totalCells > warpDriveCells then\n\t\t\t\t\twrpCostColor = \"#ff0000\"\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\twrpCostColor = warpCostColor\n\t\tend\n\n\n\t\tif warpDriveCells ~= nill then\n\t\t\ttotalCells = warpDriveCells..\" / \"..totalCells\n\t\telse\n\t\t\ttotalCells = totalCells\n\t\tend\n\n\n\t\tif screenObject.mapViewState ~= 2 then\n\t\t\tif screenObject.route ~= nill and #screenObject.route > 1 then\n\t\t\t\trouteOffset = 0\n\n\t\t\t\tif screenObject.mapViewState == 3 or screenObject.mapViewState == 4 then\n\t\t\t\t\trouteOffset = 140\n\t\t\t\tend\n\n\t\t\t\thtml = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"]]..(460+routeOffset)..[[\" x=\"99%\">New Su: ]]..newDistance..[[</text>]]\n\t\t\t\tfromName = screenObject.route[1].button.name\n\t\t\t\tif screenObject.route[1].sourcePlanet == nill then\n\t\t\t\t\tfromName = screenObject.route[1].name\n\t\t\t\tend\n\t\t\t\ttoName = screenObject.route[2].button.name\n\t\t\t\tif screenObject.route[2].sourcePlanet == nill then\n\t\t\t\t\ttoName = screenObject.route[2].name\n\t\t\t\tend\n\t\t\t\thtml = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"]]..(400+routeOffset)..[[\" x=\"99%\">]]..fromName..[[</text>]]\n\t\t\t\thtml = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"]]..(430+routeOffset)..[[\" x=\"99%\">]]..toName..[[</text>]]\n\t\t\tend\n\n\t\t\thtml = html..[[<text class=\"mediumtext\" y=\"540\" x=\"1%\">Dist: ]]..dist..\n\t\t\t\t[[ km</text><text class=\"mediumtext\" y=\"570\" x=\"1%\">Vel: ]]..approxSpeed..shipVelocityFormat..\n\t\t\t\t[[ km/h</text><text class=\"mediumtext\" y=\"600\" x=\"1%\">TTD: ]]..approxSpeed..convertTime(tonumber(time_to_distance))..\n\t\t\t\t[[</text>]]\n\t\tend\n\n\t\tif screenObject.mapViewState == 1 then\n\t\t\thtml = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"260\" x=\"99%\">Warp Cost: ]]..warpmath..\n\t\t\t\t[[</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"290\" x=\"99%\">Back Cost: ]]..warpmathBack..\n\t\t\t\t[[</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"320\" x=\"99%\" style=\"fill:]]..wrpCostColor..\n\t\t\t\t[[\">Total: ]]..totalCells..\n\t\t\t\t[[</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"510\" x=\"99%\">Weight: ]]..constructWeight..\n\t\t\t\t[[ T</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"540\" x=\"99%\">Back Weight: ]]..math.floor(constructWeight+screenObject.extraWeight)..\n\t\t\t\t[[ T</text>]]\n\t\telseif screenObject.mapViewState == 4 then\n\t\t\thtml = html..[[<text class=\"mediumtext\" y=\"30\" x=\"1%\">Warp Cost: ]]..warpmath..[[</text>]]..\n\t\t\t\t[[<text class=\"mediumtext\" y=\"60\" x=\"1%\">Back Cost: ]]..warpmathBack..[[</text>]]..\n\t\t\t\t[[<text class=\"mediumtext\" y=\"90\" x=\"1%\" style=\"fill:]]..wrpCostColor..[[\">Total: ]]..totalCells..[[</text>]]..\n\t\t\t\t[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"30\" x=\"99%\">Weight: ]]..constructWeight..[[ T</text>]]..\n\t\t\t\t[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"60\" x=\"99%\">Back Weight: ]]..math.floor(constructWeight+screenObject.extraWeight)..[[ T</text>]]\n\t\tend\n\n\t\thtml = html ..[[</svg>]]\n\t\tif screenObject.mapButtonContentId == nill then\n\t\t\tscreenObject.mapButtonContentId = screenObject.screen.addContent(0, 0, html)\n\t\telse\n\t\t\tscreenObject.screen.resetContent(screenObject.mapButtonContentId, html)\n\t\tend\n\tend\nend\n\nfunction getPointOnMap(rotationX, rotationY, rotationZ, screenObject, vector)\n\tpoint = {x = vector.x*screenObject.scale - screenObject.mapCenterPoint.x, y = vector.y*screenObject.scale - screenObject.mapCenterPoint.y, z = vector.z*screenObject.scale - screenObject.mapCenterPoint.z}\n\n\tpoint =  matmul(rotationZ, point)\n\tpoint =  matmul(rotationY, point)\n\tpoint =  matmul(rotationX, point)\n\tdistance = distance * screenObject.scale\n\tz = 1 - (point.z)/400\n\t--  if z < 0.2 then\n\t--    z = 0.2\n\t--  end\n\t--  if z > 1 then\n\t--    z = 1\n\t--  end\n\tprojection = {\n\t\t{1, 0, 0},\n\t\t{0, 1, 0},\n\t\t{0, 0, 1}\n\t}\n\tpoint =  matmul(projection, point)\n\treturn {x = point.x + screenObject.screenCenterX, y = point.y + screenObject.screenCenterY, z = point.z, planet = planet, r = 5}\nend\n\n\nfunction update3d(auto)\n\n\tglobalLoc = vec3(core.getConstructWorldPos())\n\t--  globalLoc = vec3(-94134464.000, 12765536.000, -3634464.000)\n\tconstructLoc  = {x = globalLoc.x/400000, y = (globalLoc.y/400000), z = globalLoc.z/400000}\n\n\tfor _,screenObject in ipairs(screens) do\n\n\t\t--    screenObject.mapCenterPoint = {x = globalLoc.x/400000, y = (globalLoc.y/400000), z = globalLoc.z/400000}\n\n\t\tif screenObject.mapViewState ~= 1 then\n\t\t\tscreenObject.screenCenterX = screenWidth / 2\n\t\t\tscreenObject.screenCenterY = screenHeight / 2\n\t\t\tscreenObject.scale = zoomScale\n\t\telse\n\t\t\tscreenObject.screenCenterX = screenWidth / 2\n\t\t\tscreenObject.screenCenterY = screenHeight - (screenHeight / 3)\n\t\t\tscreenObject.scale = 1\n\t\tend\n\n\t\t--    if auto then\n\t\t--      screenObject.angle = screenObject.angle + 0.01\n\t\t--      screenObject.pitch = screenObject.pitch + 0.01\n\t\t--      screenObject.yaw = screenObject.yaw + 0.01\n\t\t--    end\n\n\t\t--    screenObject.scale = screenObject.scale + 0.05\n\n\t\tcosX = math.cos(screenObject.angle)\n\t\tsinX = math.sin(screenObject.angle)\n\t\trotationX = {\n\t\t\t{1, 0, 0},\n\t\t\t{0, cosX, -sinX},\n\t\t\t{0, sinX, cosX}\n\t\t}\n\n\t\tcosY = math.cos(screenObject.pitch)\n\t\tsinY = math.sin(screenObject.pitch)\n\t\trotationY = {\n\t\t\t{cosY, 0, -sinY},\n\t\t\t{0, 1, 0},\n\t\t\t{sinY, 0, cosY}\n\t\t}\n\n\t\tcosZ = math.cos(screenObject.yaw)\n\t\tsinZ = math.sin(screenObject.yaw)\n\t\trotationZ = {\n\t\t\t{cosZ, -sinZ, 0},\n\t\t\t{sinZ, cosZ, 0},\n\t\t\t{0, 0, 1}\n\t\t}\n\n\t\thtml = style..[[<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 ]]..screenWidth..[[ ]]..screenHeight..[[\">]]\n\n\t\thtml = html..[[<rect fill=\"]]..backGroundColor..[[\" height=\"]]..screenHeight..[[\" width=\"]]..screenWidth..[[\" y=\"0\" x=\"0\"/>]]\n\n\t\tnewPoints = {}\n\n\t\tscreenObject.planetScreen = {}\n\n\t\tfor i, planet in ipairs(planets) do\n\n\t\t\tpoint = {x = planet.mapCoords.x*screenObject.scale - screenObject.mapCenterPoint.x, y = planet.mapCoords.y*screenObject.scale - screenObject.mapCenterPoint.y, z = planet.mapCoords.z*screenObject.scale - screenObject.mapCenterPoint.z}\n\n\n\t\t\t--      point = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, point)\n\n\t\t\tpoint =  matmul(rotationZ, point)\n\t\t\tpoint =  matmul(rotationY, point)\n\t\t\tpoint =  matmul(rotationX, point)\n\n\t\t\tdistance = orDistance*screenObject.scale\n\t\t\tz = 1 - (point.z)/400\n\t\t\t--\n\t\t\t--      if z < 0.0 then\n\t\t\t--        z = 0.0\n\t\t\t--      end\n\t\t\t--\n\t\t\t--      if z > 1 then\n\t\t\t--        z = 1\n\t\t\t--      end\n\n\t\t\tprojection = {\n\t\t\t\t{1, 0, 0},\n\t\t\t\t{0, 1, 0},\n\t\t\t\t{0, 0, 1}\n\t\t\t}\n\t\t\tpoint =  matmul(projection, point)\n\n\t\t\tr = 10 - (4 * (point.z + mapSize*screenObject.scale) / distance)\n\t\t\tfont = 3 - (0.8 * (point.z + mapSize*(screenObject.scale+1)) / distance)\n\n\t\t\tif r < 5 then\n\t\t\t\tr = 5\n\t\t\tend\n\t\t\tif r > 10 then\n\t\t\t\tr = 10\n\t\t\tend\n\n\t\t\t--      if font < 2 then\n\t\t\t--      font = 3\n\t\t\t--      end\n\n\t\t\tnewPoints[i] = {x = point.x + screenObject.screenCenterX, y = point.y + screenObject.screenCenterY, z = point.z, planet = planet, r = r, font = font}\n\n\n\t\t\ttable.insert(screenObject.planetScreen,planet.button.id, {x = newPoints[i].x, y = newPoints[i].y})\n\n\n\t\t\tif planet.drawZero then\n\t\t\t\tnewPoints[i].zeroPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, {x = planet.mapCoords.x, y = planet.mapCoords.y, z = 0})\n\t\t\tend\n\n\t\tend\n\n\t\ttable.sort(newPoints, compare)\n\n\t\tdegreeY = -(screenObject.pitch * (180/math.pi))\n\t\tdegreeX = screenObject.angle * (180/math.pi)\n\t\tdegreeZ = -(screenObject.yaw * (180/math.pi))\n\n\t\tif  degreeY < -360 then\n\t\t\tscreenObject.pitch = 0\n\t\tend\n\n\t\tif  degreeX > 360 then\n\t\t\tscreenObject.angle = 0\n\t\tend\n\n\t\tif  degreeZ > 360 then\n\t\t\tscreenObject.yaw = 0\n\t\tend\n\n\t\trotationSide = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, {x=0, y = 0, z= 10})\n\n\t\tmapStrokeColor = mapCircleColor\n\n\t\tif rotationSide.z < 0 then\n\t\t\tmapStrokeColor = mapBCircleColor\n\t\tend\n\n\t\thtml = html..[[<g fill=\"none\" stroke-width=\"]]..mapCircleThickness..[[\" style=\"stroke: ]]..mapStrokeColor..[[; stroke-opacity: 0.3; fill-opacity:0.3; transform-origin: ]]..toScreenCordsX(screenObject.screenCenterX)..[[% ]]..toScreenCordsY(screenObject.screenCenterY)..[[% 0px;transform: rotateX(]]..degreeX..[[deg) rotateY(]]..degreeY..[[deg) rotateZ(]]..degreeZ..[[deg);\">]]\n\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(300*screenObject.scale)..[[%\"></circle>]]\n\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(250*screenObject.scale)..[[%\"></circle>]]\n\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(200*screenObject.scale)..[[%\"></circle>]]\n\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(150*screenObject.scale)..[[%\"></circle>]]\n\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(100*screenObject.scale)..[[%\"></circle>]]\n\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(50*screenObject.scale)..[[%\"></circle>]]\n\t\thtml = html..[[</g>]]\n\n\t\t--    degreeY = degreeY -45\n\t\t--    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(250)..[[%\" fill=\"none\" stroke-width=\"0.8em\" style=\"stroke: ]]..mapStrokeColor..[[; stroke-opacity: 0.6; fill-opacity:0.8; transform-origin: 50% 50% 0px;transform: rotateX(]]..degreeX..[[deg) rotateY(]]..degreeY..[[deg) rotateZ(]]..degreeZ..[[deg);\"></circle>]]\n\n\n\t\tif screenObject.route ~= nill then\n\t\t\tpreviousPoint = constructLoc\n\t\t\tfor i, planet in ipairs(screenObject.route) do\n\t\t\t\tif planet ~= nill then\n\n\t\t\t\t\toriginPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, previousPoint)\n\t\t\t\t\tdistinationPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, planet.mapCoords)\n\n\t\t\t\t\tdashArray = \"40 10 30 10 20 10\"\n\t\t\t\t\tif screenObject.timer > 2 then\n\t\t\t\t\t\tscreenObject.timer = 0\n\t\t\t\t\tend\n\t\t\t\t\tscreenObject.timer = screenObject.timer + 1\n\n\t\t\t\t\thtml = html..[[<line stroke-linecap=\"undefined\" stroke-linejoin=\"undefined\" stroke-dasharray=\"]]..dashArray..[[\" y2=\"]]..toScreenCordsY(distinationPoint.y)..[[%\" x2=\"]]..toScreenCordsX(distinationPoint.x)..[[%\" y1=\"]]..toScreenCordsY(originPoint.y)..[[%\" x1=\"]]..toScreenCordsX(originPoint.x)..[[%\" stroke-opacity=\"0.9\" stroke-width=\"5\" stroke=\"]]..pathColor..[[\" fill=\"none\" fill-opacity=\"0\"/>]]\n\n\t\t\t\tend\n\t\t\t\tpreviousPoint = planet.mapCoords\n\t\t\tend\n\t\tend\n\n\t\tfor i, planetPoint in ipairs(newPoints) do\n\t\t\tif planetPoint.planet ~= nill then\n\n\t\t\t\tif planetPoint.zeroPoint ~= nill then\n\t\t\t\t\thtml = html..[[<line stroke-linecap=\"undefined\" stroke-linejoin=\"undefined\" y2=\"]]..toScreenCordsY(planetPoint.y)..[[%\" x2=\"]]..toScreenCordsX(planetPoint.x)..[[%\" y1=\"]]..toScreenCordsY(planetPoint.zeroPoint.y)..[[%\" x1=\"]]..toScreenCordsX(planetPoint.zeroPoint.x)..[[%\" stroke-width=\"2\" stroke-opacity=\"0.3\" stroke=\"]]..planetOffsetColor..[[\" fill=\"none\" fill-opacity=\"0.5\"/>]]\n\t\t\t\tend\n\n\t\t\t\tplColor = planetPoint.planet.color\n\n\t\t\t\tif string.len(planetColor) > 2 then\n\t\t\t\t\tplColor = planetColor;\n\t\t\t\tend\n\n\t\t\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(planetPoint.x))..[[%\" cy=\"]]..(toScreenCordsY(planetPoint.y))..[[%\" r=\"]]..toScreenCords(planetPoint.r)..[[%\" class=\"circle\" style=\"fill:]]..plColor..[[; stroke-opacity: 0.5; fill-opacity: 1\"></circle>]]\n\t\t\t\thtml = html..[[<text x=\"]]..tostring(toScreenCordsX(planetPoint.x))..[[%\" y=\"]]..tostring(toScreenCordsY( planetPoint.y))..[[%\" class=\"minitext\" font-family=\"Arial\" font-size=\"]]..planetPoint.font..[[em\" fill=\"white\">]]..planetPoint.planet.name..[[</text>]]\n\t\t\tend\n\t\tend\n\n\t\tconstructPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, constructLoc)\n\t\thtml = html..[[<circle cx=\"]]..(toScreenCordsX(constructPoint.x))..[[%\" cy=\"]]..(toScreenCordsY(constructPoint.y))..[[%\" r=\"]]..toScreenCords(constructPoint.r)..[[%\" class=\"circle\" style=\"fill:]]..mapConstructColor..[[; stroke: ]]..mapConstructSColor..[[; stroke-opacity: 0.5; fill-opacity: 1\"></circle>]]\n\n\n\n\t\thtml = html ..[[</svg>]]\n\t\tif screenObject.mapContentId == nill then\n\t\t\tscreenObject.mapContentId = screenObject.screen.addContent(0, 0, html)\n\t\telse\n\t\t\tscreenObject.screen.resetContent(screenObject.mapContentId, html)\n\t\tend\n\tend\nend\n\nfunction evaluateButtons(x, y, pressDown, screen)\n\tfor _,screenObject in ipairs(screens) do\n\t\tif  screenObject.screen.getId() == screen.getId() then\n\n\t\t\tscreenObject.mouseDown = pressDown\n\n\n\t\t\tif pressDown then\n\t\t\t\tunit.setTimer(\"maprotate\", updateMouseInterval)\n\t\t\tend\n\n\t\t\tclickCoordX = x * screenWidth\n\t\t\tclickCoordY = y * screenHeight\n\n\t\t\tif not pressDown then\n\t\t\t\tscreenObject.weightButtonClicked = nill\n\t\t\tend\n\n\t\t\t--      if screenObject.mapViewState ~= 1 then\n\t\t\tfor i, planet in ipairs(planets) do\n\n\t\t\t\tdpd = screenObject.planetScreen[planet.button.id]\n\n\t\t\t\tif clickCoordX > dpd.x-20 and clickCoordX < dpd.x+20 and clickCoordY > dpd.y-20 and clickCoordY < dpd.y+20 and pressDown then\n\t\t\t\t\tif screenObject.selectedPlanet == planet and pressDown then\n\t\t\t\t\t\tscreenObject.selectedPlanet = nill\n\t\t\t\t\telseif pressDown then\n\t\t\t\t\t\tscreenObject.selectedPlanet = planet\n\t\t\t\t\tend\n\t\t\t\t\tscreenObject.changeView = false\n\t\t\t\t\tupdate3d(false)\n\t\t\t\t\tupdateButtons(false)\n\t\t\t\t\treturn\n\t\t\t\tend\n\t\t\tend\n\t\t\t--      end\n\n\t\t\tif screenObject.mapViewState == 1 then\n\t\t\t\t--        for i, v in ipairs(activeMoons) do activeMoons[i] = nil end\n\t\t\t\tfor i, planet in ipairs(planets) do\n\t\t\t\t\tif clickCoordX > planet.button.x-buttonStrokeHalf and clickCoordX < planet.button.x + buttonWidth+buttonStrokeHalf and clickCoordY > planet.button.y-buttonStrokeHalf and clickCoordY < planet.button.y + buttonHeight+buttonStrokeHalf then\n\t\t\t\t\t\tif screenObject.selectedPlanet == planet and pressDown then\n\t\t\t\t\t\t\tscreenObject.selectedPlanet = nill\n\t\t\t\t\t\telseif pressDown then\n\t\t\t\t\t\t\tscreenObject.selectedPlanet = planet\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tif screenObject.selectedPlanet ~= nill then\n\t\t\t\t\tif screenObject.selectedPlanet.moons ~= nill then\n\t\t\t\t\t\tfor i, moon in ipairs(screenObject.selectedPlanet.moons) do\n\t\t\t\t\t\t\tif clickCoordX > moon.button.x-buttonStrokeHalf and clickCoordX < moon.button.x + buttonWidth+buttonStrokeHalf and clickCoordY > moon.button.y-buttonStrokeHalf and clickCoordY < moon.button.y + buttonHeight+buttonStrokeHalf then\n\t\t\t\t\t\t\t\tscreenObject.selectedPlanet = moon\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\tfor i, moon in ipairs(screenObject.selectedPlanet.sourcePlanet.moons) do\n\t\t\t\t\t\t\tif clickCoordX > moon.button.x-buttonStrokeHalf and clickCoordX < moon.button.x + buttonWidth+buttonStrokeHalf and clickCoordY > moon.button.y-buttonStrokeHalf and clickCoordY < moon.button.y + buttonHeight+buttonStrokeHalf then\n\t\t\t\t\t\t\t\tscreenObject.selectedPlanet = moon\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tif #weightScreenButtons >= 1 then\n\t\t\t\t\tfor i, button in ipairs(weightScreenButtons) do\n\t\t\t\t\t\tif clickCoordX > button.x-buttonStrokeHalf and clickCoordX < button.x + button.width+buttonStrokeHalf and clickCoordY > button.y-buttonStrokeHalf and clickCoordY < button.y + buttonHeight+buttonStrokeHalf then\n\t\t\t\t\t\t\tif not pressDown then\n\t\t\t\t\t\t\t\tscreenObject.extraWeight = screenObject.extraWeight + button.change\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tscreenObject.weightButtonClicked = button\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tif screenObject.changeView and not pressDown then\n\t\t\t\tif screenObject.mapViewState ~= 1 then\n\t\t\t\t\tscreenObject.mapViewState = screenObject.mapViewState + 1\n\t\t\t\t\tif screenObject.mapViewState > 4 then\n\t\t\t\t\t\tscreenObject.mapViewState = 1\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tif clickCoordX > (screenWidth / 2) - 200 and  clickCoordX < (screenWidth / 2) + 200 and clickCoordY > (screenHeight / 2) and  clickCoordY < (screenHeight / 2) + 200 then\n\t\t\t\t\t\tscreenObject.mapViewState = 2\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tsave(screenObject)\n\t\t\tend\n\n\t\t\tupdate3d(false)\n\t\t\tupdateButtons(false)\n\n\t\t\treturn\n\t\tend\n\tend\nend\n\nfunction mapRotate()\n\n\tlocal someOneHolding = false\n\n\tfor _,screenObject in ipairs(screens) do\n\t\tif screenObject.mouseDown then\n\t\t\tsomeOneHolding = true\n\t\t\tchanged = false;\n\t\t\tif (screenObject.screen.prevMouseX ~= nil and screenObject.screen.getMouseX() > 0 and screenObject.screen.getMouseY() > 0) then\n\n\n\t\t\t\tdifX = (screenObject.screen.prevMouseX - screenObject.screen.getMouseX()*screenWidth)\n\t\t\t\tdifY = (screenObject.screen.prevMouseY - screenObject.screen.getMouseY()*screenHeight)\n\n\t\t\t\tif (screenObject.screen.getMouseY() > 0.85 and screenObject.mapViewState ~= 1) then\n\t\t\t\t\tif (difX < 20 or difX > -20) then\n\t\t\t\t\t\tscreenObject.yaw = screenObject.yaw + (difX / 100)\n\t\t\t\t\t\tchanged = true\n\t\t\t\t\tend\n\t\t\t\t\tif changed then\n\t\t\t\t\t\tupdate3d(false)\n\t\t\t\t\tend\n\t\t\t\telseif (screenObject.screen.getMouseX() < 0.15 and screenObject.mapViewState ~= 1) then\n\t\t\t\t\tif ((difY < 20 or difY > -20) and (difY > 0.5 or difY < -0.5)) then\n\t\t\t\t\t\tscreenObject.angle = screenObject.angle - (difY / 200)\n\t\t\t\t\t\tchanged = true\n\t\t\t\t\tend\n\t\t\t\t\tif changed then\n\t\t\t\t\t\tupdate3d(false)\n\t\t\t\t\tend\n\t\t\t\telseif (screenObject.screen.getMouseY() < 0.15 and screenObject.mapViewState ~= 1) then\n\t\t\t\t\tif (difX < 20 or difX > -20) and (difX > 0.5 or difX < -0.5) then\n\t\t\t\t\t\tscreenObject.pitch = screenObject.pitch - (difX / 200)\n\t\t\t\t\t\tchanged = true\n\t\t\t\t\tend\n\t\t\t\t\tif changed then\n\t\t\t\t\t\tupdate3d(false)\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tif (difX < 20 or difX > -20) and (difX > 0.5 or difX < -0.5) then\n\t\t\t\t\t\tscreenObject.pitch = screenObject.pitch - (difX / 200)\n\t\t\t\t\t\tchanged = true\n\t\t\t\t\tend\n\n\t\t\t\t\tif ((difY < 20 or difY > -20) and (difY > 0.5 or difY < -0.5)) then\n\t\t\t\t\t\tscreenObject.angle = screenObject.angle - (difY / 200)\n\t\t\t\t\t\tchanged = true\n\t\t\t\t\tend\n\t\t\t\t\tif changed then\n\t\t\t\t\t\tscreenObject.changeView = false\n\t\t\t\t\t\tupdate3d(false)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\n\n\t\t\tif (screenObject.screen.getMouseX() > 0 and screenObject.screen.getMouseY() > 0)then\n\t\t\t\tscreenObject.screen.prevMouseX = screenObject.screen.getMouseX()*screenWidth\n\t\t\t\tscreenObject.screen.prevMouseY = screenObject.screen.getMouseY()*screenHeight\n\t\t\t\tif (changed) then\n\t\t\t\t\tscreenObject.changeView = false\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tscreenObject.changeView = true\n\t\t\t\tscreenObject.mouseDown = false\n\t\t\t\tscreenObject.screen.prevMouseX = nill\n\t\t\t\tscreenObject.screen.prevMouseY = nill\n\t\t\tend\n\t\telse\n\t\t\tsave(screenObject)\n\t\t\tscreenObject.changeView = true\n\t\t\tscreenObject.screen.prevMouseX = nill\n\t\t\tscreenObject.screen.prevMouseY = nill\n\t\tend\n\tend\n\n\tif not someOneHolding then\n\t\tsaveAll()\n\t\tunit.stopTimer(\"maprotate\")\n\tend\nend\n\nfor _,screenObject in ipairs(screens) do\n\tscreenObject.screen.clear()\nend\nupdate3d(false)\nupdateButtons(false)\nunit.setTimer(\"spacemap\", updateInterval)\nunit.hide();\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"8"}],"methods":[],"events":[]}
