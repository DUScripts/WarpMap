{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-2":{"name":"system","type":{"events":[],"methods":[]}},"-3":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"evaluateButtons(x, y, false, slot4)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"3"},"key":"0"},{"code":"evaluateButtons(x, y, true, slot4)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"3"},"key":"1"},{"code":"evaluateButtons(x, y, false, slot5)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"4"},"key":8},{"code":"evaluateButtons(x, y, true, slot5)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"4"},"key":9},{"code":"evaluateButtons(x, y, false, slot6)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseUp(x,y)","slotKey":"5"},"key":8},{"code":"evaluateButtons(x, y, true, slot6)","filter":{"args":[{"variable":"*"},{"variable":"*"}],"signature":"mouseDown(x,y)","slotKey":"5"},"key":9},{"code":"update3d(true)\nupdateButtons(true)","filter":{"args":[{"value":"spacemap"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"2"},{"code":"mapRotate()","filter":{"args":[{"value":"maprotate"}],"signature":"tick(timerId)","slotKey":"-1"},"key":"3"},{"code":"\nweightButtonWidth = 80\n\nbuttonHeight = 40\nbuttonWidth = 333\nbuttonSpacing = 3\nbuttonStroke = 2\nbuttonStrokeHalf = buttonStroke / 2\n\nscreenHeight = 612\nscreenWidth = 1024\n\nradarScale = 110\nradarFullScreenScale = 50\n\nscreens = {}\ndatabank = nill\nwarpdrive = nill\ncore = nill\n\nlineColor = \"#5c58b6\"\nlineColorZero = \"#D7F4FA\"\nlineColorPlanet = \"#a6a5b8\"\n\nwarpDriveDestinationPlanet = nill\n\nupdateInterval = 1\nupdateMouseInterval = 0.05\n\nfunction Split(s, delimiter)\n  result = {};\n  for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n    table.insert(result, match);\n  end\n  return result;\nend\n\nfunction initializeScreen(key, screenUnit)\n  return {\n    screen = screenUnit,\n    id = screenUnit.getId(),\n    slot = key,\n    angle = -1,\n    pitch = 0,\n    yaw = 0,\n    scale =  1,\n    mapCenterPoint = {x = 0, y = 0, z = 0},\n    screenCenterX = screenWidth / 2,\n    screenCenterY = screenHeight - (screenHeight / 3),\n    mapViewState = 1,\n    extraWeight = 0,\n    weightButtonClicked = nill,\n    timer = 0,\n    changeView = true,\n    mouseDown = false,\n    selectedPlanet = nill}\nend\n\nfor key, value in pairs(unit) do\n  if type(value) == \"table\" and type(value.export) == \"table\" then\n    if value.getElementClass then\n      if value.getElementClass() == \"ScreenUnit\" then\n        screens[#screens + 1] = initializeScreen(key, value)\n      elseif value.getElementClass() == \"DataBankUnit\" then\n        databank = value\n      elseif value.getElementClass() == \"WarpDriveUnit\" then\n        warpdrive = value\n      elseif value.getElementClass() == \"CoreUnitDynamic\" then\n        core = value\n      elseif value.getElementClass() == \"CoreUnitStatic\" then\n        core = value\n      end\n\n    end\n  end\nend\n\nfunction split(s, delimiter)\n  result = {};\n  for match in (s..delimiter):gmatch(\"(.-)\"..delimiter) do\n    table.insert(result, match);\n  end\n  return result;\nend\n\nshipWeight = 0\n\nif databank then\n  for _,key in ipairs(json.decode(databank.getKeys())) do\n    value = databank.getFloatValue(key)\n\n    if key == \"shipWeight\" then\n      shipWeight = value\n    end\n\n    for _,screenObject in ipairs(screens) do\n      if string.match(key, screenObject.slot) then\n\n        splitted = split(key, \"_\")\n        lastPart = splitted[#splitted]\n\n        if lastPart == \"angle\" then\n          screenObject.angle = value\n        elseif lastPart == \"pitch\" then\n          screenObject.pitch = value\n        elseif lastPart == \"yaw\" then\n          screenObject.yaw = value\n        elseif lastPart == \"state\" then\n          screenObject.mapViewState = value\n        elseif lastPart == \"weight\" then\n          shipWeight = value\n        end\n      end\n    end\n  end\nend\n\nfunction save(screenObject)\n  if databank then\n    databank.setFloatValue(screenObject.slot..\"_angle\", screenObject.angle)\n    databank.setFloatValue(screenObject.slot..\"_pitch\", screenObject.pitch)\n    databank.setFloatValue(screenObject.slot..\"_yaw\", screenObject.yaw)\n    databank.setFloatValue(screenObject.slot..\"_state\", screenObject.mapViewState)\n  end\nend\n\nfunction saveAll()\n  if databank then\n    databank.clear()\n    for _,screenObject in ipairs(screens) do\n      save(screenObject)\n    end\n    databank.setFloatValue(\"shipWeight\", math.floor(core.getConstructMass()/ 1000))\n  end\nend\n\nweightScreenButtons = {}\n\nlocal amountButton = {id = #weightScreenButtons, name = \"-100\", y=screenHeight-buttonHeight-buttonSpacing, x=screenWidth-((4-#weightScreenButtons)*(weightButtonWidth+buttonSpacing+buttonStrokeHalf)), change = -100}\ntable.insert(weightScreenButtons, amountButton)\nlocal amountButton = {id = #weightScreenButtons, name = \"-10\", y=screenHeight-buttonHeight-buttonSpacing, x=screenWidth-((4-#weightScreenButtons)*(weightButtonWidth+buttonSpacing+buttonStrokeHalf)), change = -10}\ntable.insert(weightScreenButtons, amountButton)\nlocal amountButton = {id = #weightScreenButtons, name = \"+10\", y=screenHeight-buttonHeight-buttonSpacing, x=screenWidth-((4-#weightScreenButtons)*(weightButtonWidth+buttonSpacing+buttonStrokeHalf)), change = 10}\ntable.insert(weightScreenButtons, amountButton)\nlocal amountButton = {id = #weightScreenButtons, name = \"+100\", y=screenHeight-buttonHeight-buttonSpacing, x=screenWidth-((4-#weightScreenButtons)*(weightButtonWidth+buttonSpacing+buttonStrokeHalf)), change = 100}\ntable.insert(weightScreenButtons, amountButton)\n\nfunction getMoonsCount(planet)\n  counter = \"\"\n  for index in pairs(planet.moons) do\n    counter = counter..\"*\"\n  end\n  return counter\nend\n\nfunction formatPlanetName(planet)\n  return planet.name..getMoonsCount(planet)\nend\n\nfunction mapX(planet)\n  return planet.center.x/400000\nend\n\nfunction mapY(planet)\n  return (planet.center.y/400000)\nend\n\nfunction mapZ(planet)\n  return (planet.center.z)/400000\nend\n\nplanets = {}\n\n-- creating planet button and assingning it to planet object\nfunction addPlanetButton(planet, buttonX, buttonY)\n  button = {id = #planets + 1, planet = planet, name = formatPlanetName(planet), x=buttonX, y=buttonY}\n  planet.button = button\n  planet.mapCoords = {x = mapX(planet),y = mapY(planet), z = mapZ(planet)}\n  table.insert(planets, planet)\nend\n\n-- Moons\n-- Madis\nlocal MadisMoon1 = {name = \"Moon 1\", center = vec3(17448118.224,22966846.286,143078.820), radius = 10000}\nlocal MadisMoon2 = {name = \"Moon 2\", center = vec3(17194626.000,22243633.880,-214962.810), radius = 11000}\nlocal MadisMoon3 = {name = \"Moon 3\", center = vec3(17520614.000,22184730.000,-309989.990), radius = 15005}\n\n-- Alioth\nlocal AliothMoon1 = {name = \"Moon 1\", center = vec3(457933.000,-1509011.000,115524.000), radius = 30000}\nlocal AliothMoon4 = {name = \"Moon 4\", center = vec3(-1692694.000,729681.000,-411464.000), radius = 30330}\nlocal Sanctuary = {name = \"Sanctuary\", center = vec3(-1404835.000,562655.000,-285074.000), radius = 83400}\n\n-- Thades\nlocal ThadesMoon1 = {name = \"Moon 1\",center = vec3(29214402.000,10907080.695,433858.200), radius = 14002}\nlocal ThadesMoon2 = {name = \"Moon 2\",center = vec3(29404193.000,10432768.000,19554.131), radius = 15000}\n\n-- Talemai\nlocal TalemaiMoon1 = {name = \"Moon 1\",center = vec3(-13058408.000,55781856.000,740177.760), radius = 15000}\nlocal TalemaiMoon2 = {name = \"Moon 2\",center = vec3(-13503090.000,55594325.000,769838.640), radius = 12000}\nlocal TalemaiMoon3 = {name = \"Moon 3\",center = vec3(-12800515.000,55700259.000,325207.840), radius = 11000}\n\n-- Feli\nlocal FeliMoon1 = {name = \"Moon 1\",center = vec3(-43902841.780,22261034.700,-48862386.000), radius = 14000}\n\n-- Sinnen\nlocal SinnenMoon1 = {name = \"Moon 1\",center = vec3(58969616.000,29797945.000,57969449.000), radius = 17000}\n\n-- Lacobus\nlocal LacobusMoon1 = {name = \"Moon 1\",center = vec3(99180968.000,-13783862.000,-926156.400), radius = 18000}\nlocal LacobusMoon2 = {name = \"Moon 2\",center = vec3(99250052.000,-13629215.000,-1059341.400), radius = 14000}\nlocal LacobusMoon3 = {name = \"Moon 3\",center = vec3(98905288.170,-13950921.100,-647589.530), radius = 15000}\n\n-- Ion\nlocal IonMoon1 = {name = \"Moon 1\",center = vec3(2472916.800,-99133747.000,-1133582.800), radius = 11000}\nlocal IonMoon2 = {name = \"Moon 2\",center = vec3(2995424.500,-99275010.000,-1378480.700), radius = 15000}\n\n-- Planets\nlocal ion = {name = \"Ion\", center = vec3(2995424.500,-99275010.000,-1378480.700), radius = 44950, color = \"#9fc1df\", moons = {IonMoon1, IonMoon2}}\nlocal thades = {name = \"Thades\", center = vec3(29165536.000, 10865536.000, 65536.000), radius = 49000, color = \"#da985f\", moons = {ThadesMoon1, ThadesMoon2}}\nlocal sinnen = {name = \"Sinnen\", center = vec3(58665536.000, 29665536.000, 58165536.000), radius = 54950, color = \"#d0885b\", moons = {SinnenMoon1}, drawZero = true}\nlocal alioth = {name = \"Alioth\", center = vec3(-8.000, -8.000, -126303.000), radius = 126068, color = \"#4d5861\", moons = {AliothMoon1, AliothMoon4, Sanctuary}}\nlocal madis = {name = \"Madis\", center = vec3(17465536.000, 22665536.000, -34464.000), radius = 44300, color = \"#777bbf\", moons = {MadisMoon1, MadisMoon2, MadisMoon3}}\nlocal jago = {name = \"Jago\", center = vec3(-94134464.000, 12765536.000, -3634464.000), radius = 61590, color = \"#36444f\", moons = {}}\nlocal symeon = {name = \"Symeon\", center = vec3(14165536.000, -85634464.000, -934464.000), radius = 49050, color = \"#cad1d9\", moons = {}}\nlocal lacobus = {name = \"Lacobus\", center = vec3(98865536.000, -13534464.000, -934464.000), radius = 55650, color = \"#deedf9\", moons = {LacobusMoon1, LacobusMoon2, LacobusMoon3}}\nlocal teoma = {name = \"Teoma\", center = vec3(80865536.000, 54665536.000, -934464.000), radius = 62000, color = \"#3e5268\", moons = {}}\nlocal feli = {name = \"Feli\", center = vec3(-43534464.000, 22565536.000, -48934464.000), radius = 60000, color = \"#928370\", moons = {FeliMoon1}, drawZero = true}\nlocal talemai = {name = \"Talemai\", center = vec3(-13234464.000, 55765536.000, 465536.000), radius = 57450, color = \"#929482\", moons = {TalemaiMoon1, TalemaiMoon2, TalemaiMoon3}}\nlocal sicari = {name = \"Sicari\",center = vec3(52765536.000, 27165536.000, 52065536.000), radius = 51100, color = \"#b78a64\", moons = {}, drawZero = true}\n\n-- adding planets and setting their button positions\naddPlanetButton(alioth, 10, 10)\naddPlanetButton(madis, 10, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(thades, 10, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(talemai, 10, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\n\naddPlanetButton(feli, button.x+(buttonWidth+buttonSpacing+buttonStrokeHalf), 10)\naddPlanetButton(sicari, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(symeon, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(sinnen, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\n\naddPlanetButton(jago, button.x+(buttonWidth+buttonSpacing+buttonStrokeHalf), 10)\naddPlanetButton(teoma, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(ion, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\naddPlanetButton(lacobus, button.x, button.y+(buttonHeight+buttonSpacing+buttonStrokeHalf))\n\nbuttonLowY = button.y\n\n-- creating moon buttons\nplace = 1\nfor i, planet in ipairs(planets) do\n  if #planet.moons > 0 then\n    shift = 1\n    extraX = -(buttonWidth+buttonSpacing+buttonStrokeHalf)\n    if #planet.moons == 1 then\n      extraX = extraX + (buttonWidth+buttonSpacing+buttonStrokeHalf)\n    elseif #planet.moons == 2 then\n      extraX = extraX + (buttonWidth+buttonSpacing+buttonStrokeHalf) / 2\n    end\n    for y, moon in ipairs(planet.moons) do\n      ys = buttonLowY+(buttonHeight+buttonSpacing+buttonStrokeHalf)\n      xs = 10 + (shift * (buttonWidth+buttonSpacing+buttonStrokeHalf)) + extraX\n      local button = {id = y, planet = moon, name = planet.name..\" \"..moon.name,  y=ys, x=xs}\n      moon.button = button\n      moon.sourcePlanet = planet\n      moon.mapCoords = {x = mapX(moon),y = mapY(moon), z = mapZ(moon)}\n      shift = shift + 1\n    end\n  end\nend\n\nmapSize = 100\n\nstyle = [[<style>.circle {stroke: #4B4B4B;stroke-width: 0.3em;stroke-opacity: 0.9;fill-opacity: 0;}.planet {stroke: black;stroke-width: 1;}text {font-family: Arial,sans-serif, Helvetica;stroke-width: 0;font-weight: bold;}.btext {font-size: 4em;}.bdtext {font-size: 2.5em;text-anchor: end;}.minitext {fill: white;}.mediumtext {fill: white;font-size: 2.8em;fill: #dfdfdf;}</style>]]\n\n\nfunction matmul(projection, vector)\n  x = (projection[1][1] * vector.x) + (projection[1][2] * vector.y) + (projection[1][3] * vector.z)\n  y = (projection[2][1] * vector.x) + (projection[2][2] * vector.y) + (projection[2][3] * vector.z)\n  z = (projection[3][1] * vector.x) + (projection[3][2] * vector.y) + (projection[3][3] * vector.z)\n  return {x = x, y = y, z = z}\nend\n\nfunction compare(a,b)\n  return a.z > b.z\nend\n\norDistance = 200\n\nfunction toScreenCordsX(value)\n  if value == nill then\n    return 0\n  end\n  return value * 100 / screenWidth\nend\n\nfunction toScreenCordsY(value)\n  if value == nill then\n    return 0\n  end\n  return value * 100 / screenHeight\nend\n\nfunction toScreenCords(value)\n  if value == nill then\n    return 0\n  end\n  return value * 100 / screenWidth\nend\n\nfunction planetByName(name)\n  for i, planet in ipairs(planets) do\n    if planet.name == name then\n      return planet\n    end\n    if planet.moons ~= nill then\n      for y, moon in ipairs(planet.moons) do\n        -- checking by formatted moon name which includes planet name\n        if moon.button.name == name then\n          return moon\n        end\n      end\n    end\n  end\n  return nill\nend\n\nfunction getSuDistance(center)\n  return tonumber(string.format(\"%.2f\", math.sqrt((globalLoc.x-center.x)^2+(globalLoc.y-center.y)^2+(globalLoc.z-center.z)^2)/200000))\nend\n\nfunction getSuDistancePoints(fromVector, center)\n  return tonumber(string.format(\"%.2f\", math.sqrt((fromVector.x-center.x)^2+(fromVector.y-center.y)^2+(fromVector.z-center.z)^2)/200000))\nend\n\nfunction getRoute(toPlanet)\n\n  distance = getSuDistance(toPlanet.center)\n  if distance <= 500 then\n    return {toPlanet}\n  end\n\n  primary = {}\n\n  for i, planet in ipairs(planets) do\n    distance = getSuDistance(planet.center)\n    if distance <= 500 then\n      table.insert(primary, planet)\n    end\n\n    for i, moon in ipairs(planet.moons) do\n      distance = getSuDistance(moon.center)\n      if distance <= 500 then\n        table.insert(primary, moon)\n      end\n    end\n  end\n\n\n\n  local newDistance = 400000\n  local endPlanets = {}\n\n  for i, primaryPlanet in ipairs(primary) do\n    distance = getSuDistancePoints(primaryPlanet.center, toPlanet.center)\n    if distance <= 500 then\n      total = (getSuDistance(primaryPlanet.center)+distance)\n      if total < newDistance then\n        newDistance = total\n        endPlanets[1] = primaryPlanet\n        endPlanets[2] = toPlanet\n      end\n    end\n  end\n  return endPlanets, newDistance\nend\n\nfunction convertTime(t)\n  if t == nil then\n    return \"\"\n  end\n  hours = 0\n  minutes = t\n  seconds = 0\n  if t > 60 then\n    hours = math.floor(t / 60)\n  end\n\n  if (hours > 24) then\n    return \"-\"\n  end\n\n\n  if hours > 0 then\n    minutes =  math.floor(t - (hours * 60))\n  else\n    minutes =  math.floor(t)\n  end\n\n  seconds = (t - (hours * 60) - minutes)\n  seconds = math.floor(seconds * 60)\n\n  endText = minutes..\"min \"..seconds..\"sec\"\n  if hours > 0 then\n    endText =  hours..\"h \"..endText\n  end\n  return endText\nend\n\nupdateCounter = 30\n\nfunction update(auto)\n\n  updateCounter = updateCounter + 1\n\n  if auto and updateCounter < 1 / updateInterval then\n    return\n  end\n\n\n\nend\n\nfunction updateButtons(auto)\n\n  updateCounter = updateCounter + 1\n\n  if auto and updateCounter < 1 / updateInterval then\n    return\n  end\n\n  updateCounter = 0\n\n  --  globalLoc = vec3(core.getConstructWorldPos())\n  --  globalLoc = vec3(-94134464.000, 12765536.000, -3634464.000)\n  --  constructLoc  = {x = globalLoc.x/400000, y = (globalLoc.y/400000), z = globalLoc.z/400000}\n\n  if warpdrive then\n    local decoded = json.decode(warpdrive.getData())\n    local warpDriveDestination = decoded.destination\n    if warpDriveDestinationPlanet == nill or warpDriveDestinationPlanet.name ~= warpDriveDestination then\n      warpDriveDestinationPlanet = planetByName(warpDriveDestination)\n      if warpDriveDestinationPlanet ~= nill then\n\n        for _,screenObject in ipairs(screens) do\n          screenObject.selectedPlanet = warpDriveDestinationPlanet\n        end\n      end\n    end\n    warpDriveCells =  tonumber(Split(decoded.cellCount, \" / \")[1])\n  end\n\n  if core then\n    shipVelocity = vec3(core.getVelocity()):len() * 3.6\n  end\n\n  constructWeight = math.ceil(core.getConstructMass() / 1000)\n\n  if constructWeight == 0 and shipWeight ~= 0 then\n    constructWeight = shipWeight\n  end\n\n  for _,screenObject in ipairs(screens) do\n\n    local selectedPlanet = screenObject.selectedPlanet\n\n    if selectedPlanet == nill and warpDriveDestinationPlanet ~= nill then\n      screenObject.selectedPlanet = warpDriveDestinationPlanet\n      selectedPlanet = warpDriveDestinationPlanet\n    end\n\n    if selectedPlanet == nill then\n      calculatedDist = 0\n    else\n      calculatedDist = getSuDistance(selectedPlanet.center)\n    end\n\n\n    if calculatedDist > 500 then\n      screenObject.route, calculatedDist = getRoute(selectedPlanet)\n      newDistance = calculatedDist\n    else\n      screenObject.route = {selectedPlanet}\n    end\n\n\n\n    if core then\n      warpmath = math.floor((constructWeight  * calculatedDist * 0.00025)+0.5)\n      warpmathBack = math.floor(((constructWeight+screenObject.extraWeight)  * calculatedDist * 0.00025)+0.5)\n      if constructWeight+screenObject.extraWeight < 0 then\n        screenObject.extraWeight = -constructWeight\n      end\n    else\n      warpmath = 0\n      warpmathBack = 0\n    end\n\n\n    approxSpeed = \"\"\n    predictedSpeed = 15000\n    if shipVelocity <= 100 then\n      approxSpeed = \"*\"\n      if calculatedDist < 3 then\n        predictedSpeed = 8000\n      elseif calculatedDist < 10  then\n        predictedSpeed = 10000\n      elseif calculatedDist < 20  then\n        predictedSpeed = 20000\n      else\n        predictedSpeed = 29900\n      end\n    end\n\n    shipVelocityFormat = string.format(\"%.0f\", predictedSpeed)\n\n\n    time_to_distance = string.format(\"%.2f\", calculatedDist * 200 / ( predictedSpeed ) * 60)\n    dist = string.format(\"%.0f\", calculatedDist * 200)\n\n\n\n    html = [[<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 ]]..screenWidth..[[ ]]..screenHeight..[[\">]]\n\n    if screenObject.mapViewState == 1 then\n      for i, planet in ipairs(planets) do\n        textColor = \"#d2d1d1\"\n        backColor = \"#4B4B4B\"\n\n        if (screenObject.selectedPlanet == planet or screenObject.selectedPlanet ~=nill and screenObject.selectedPlanet.sourcePlanet == planet) then\n          textColor = \"#515151\"\n          backColor = \"#c5c5c5\"\n        end\n\n        if (warpDriveDestinationPlanet ~= nill and (warpDriveDestinationPlanet == planet or warpDriveDestinationPlanet.sourcePlanet == planet)) then\n          textColor = \"#40d051\"\n          if (screenObject.selectedPlanet == planet or screenObject.selectedPlanet.sourcePlanet == planet) then\n            textColor = \"#2a8535\"\n          end\n        end\n\n        distanceToPlanet = getSuDistance(planet.center)\n\n        html = html..[[<rect rx=\"0\" height=\"]]..buttonHeight..[[\" width=\"]]..buttonWidth..[[\" y=\"]]..planet.button.y..[[\" x=\"]]..planet.button.x..[[\" stroke-width=\"]]..buttonStroke..[[\" stroke=\"#dfdfdf\" fill=\"]]..backColor..[[\"/>]]\n        html = html..[[<text class=\"btext\" y=\"]]..(planet.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(planet.button.x+10)..[[\" fill=\"]]..textColor..[[\">]]..planet.button.name..[[</text>]]\n        html = html..[[<text class=\"bdtext\" y=\"]]..(planet.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(planet.button.x-10+buttonWidth)..[[\" fill=\"]]..textColor..[[\">]]..distanceToPlanet..[[</text>]]\n      end\n\n      if screenObject.selectedPlanet ~= nill then\n\n        moons = screenObject.selectedPlanet.moons\n\n        if screenObject.selectedPlanet.sourcePlanet ~= nill then\n          moons = screenObject.selectedPlanet.sourcePlanet.moons\n        else\n          moons = screenObject.selectedPlanet.moons\n        end\n\n        for i, moon in ipairs(moons) do\n\n          textColor = \"#d2d1d1\"\n          backColor = \"#333333\"\n          if (screenObject.selectedPlanet == moon) then\n            textColor = \"#515151\"\n            backColor = \"#97a9a6\"\n          end\n\n          if (warpDriveDestinationPlanet == moon) then\n            textColor = \"#40d051\"\n            if (screenObject.selectedPlanet == moon) then\n              textColor = \"#287431\"\n            end\n          end\n\n          calculatedDist = getSuDistance(moon.center)\n\n          html = html..[[<rect rx=\"0\" height=\"]]..buttonHeight..[[\" width=\"]]..buttonWidth..[[\" y=\"]]..(moon.button.y)..[[\" x=\"]]..(moon.button.x)..[[\" stroke-width=\"]]..buttonStroke..[[\" stroke=\"#dfdfdf\" fill=\"]]..backColor..[[\"/>]]\n          html = html..[[<text class=\"btext\" y=\"]]..(moon.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(moon.button.x+10)..[[\" fill=\"]]..textColor..[[\">]]..moon.name..[[</text>]]\n          html = html..[[<text class=\"bdtext\" y=\"]]..(moon.button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(moon.button.x-10+buttonWidth)..[[\" fill=\"]]..textColor..[[\">]]..calculatedDist..[[</text>]]\n\n        end\n      end\n\n\n      textColor = \"#d2d1d1\"\n\n      for i, button in ipairs(weightScreenButtons) do\n\n        backColor = \"#4B4B4B\"\n        if screenObject.weightButtonClicked == button and screenObject.mouseDown then\n          backColor = \"#30786B\"\n        end\n\n        html = html..[[<rect rx=\"0\" height=\"]]..buttonHeight..[[\" width=\"]]..weightButtonWidth..[[\" y=\"]]..button.y..[[\" x=\"]]..button.x..[[\" stroke-width=\"]]..buttonStroke..[[\" stroke=\"#dfdfdf\" fill=\"]]..backColor..[[\"/>]]\n        html = html..[[<text class=\"btext\" y=\"]]..(button.y+(buttonHeight/2)+20-buttonStroke*2)..[[\" x=\"]]..(button.x+5)..[[\" fill=\"]]..textColor..[[\">]]..button.name..[[</text>]]\n      end\n    end\n\n    totalCells = warpmath+warpmathBack\n\n    warpCostColor = \"#9cfd80\"\n\n\n    if warpDriveCells ~= nill then\n      if totalCells <= warpDriveCells - 10 then\n        warpCostColor = \"#08f600\"\n      elseif totalCells >= warpDriveCells - 2 and totalCells < warpDriveCells then\n        warpCostColor = \"#ceffc0\"\n      elseif totalCells == warpDriveCells then\n        warpCostColor = \"#fcfd80\"\n      elseif totalCells > warpDriveCells then\n        warpCostColor = \"#ff0000\"\n      end\n    end\n\n    if warpDriveCells ~= nill then\n      totalCells = warpDriveCells..\" / \"..totalCells\n    else\n      totalCells = totalCells\n    end\n\n\n    if screenObject.mapViewState ~= 2 then\n      if screenObject.route ~= nill and #screenObject.route > 1 then\n        routeOffset = 0\n\n        if screenObject.mapViewState == 3 or screenObject.mapViewState == 4 then\n          routeOffset = 140\n        end\n\n        html = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"]]..(460+routeOffset)..[[\" x=\"99%\">New Su: ]]..newDistance..[[</text>]]\n        fromName = screenObject.route[1].button.name\n        if screenObject.route[1].sourcePlanet == nill then\n          fromName = screenObject.route[1].name\n        end\n        toName = screenObject.route[2].button.name\n        if screenObject.route[2].sourcePlanet == nill then\n          toName = screenObject.route[2].name\n        end\n        html = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"]]..(400+routeOffset)..[[\" x=\"99%\">]]..fromName..[[</text>]]\n        html = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"]]..(430+routeOffset)..[[\" x=\"99%\">]]..toName..[[</text>]]\n      end\n\n      html = html..[[<text class=\"mediumtext\" y=\"540\" x=\"1%\">Dist: ]]..dist..\n        [[ km</text><text class=\"mediumtext\" y=\"570\" x=\"1%\">Vel: ]]..approxSpeed..shipVelocityFormat..\n        [[ km/h</text><text class=\"mediumtext\" y=\"600\" x=\"1%\">TTD: ]]..approxSpeed..convertTime(tonumber(time_to_distance))..\n        [[</text>]]\n    end\n\n    if screenObject.mapViewState == 1 then\n      html = html..[[<text text-anchor=\"end\" class=\"mediumtext\" y=\"260\" x=\"99%\">Warp Cost: ]]..warpmath..\n        [[</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"290\" x=\"99%\">Back Cost: ]]..warpmathBack..\n        [[</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"320\" x=\"99%\" style=\"fill:]]..warpCostColor..\n        [[\">Total: ]]..totalCells..\n        [[</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"510\" x=\"99%\">Weight: ]]..constructWeight..\n        [[ T</text><text text-anchor=\"end\" class=\"mediumtext\" y=\"540\" x=\"99%\">Back Weight: ]]..math.floor(constructWeight+screenObject.extraWeight)..\n        [[ T</text>]]\n    elseif screenObject.mapViewState == 4 then\n      html = html..[[<text class=\"mediumtext\" y=\"30\" x=\"1%\">Warp Cost: ]]..warpmath..[[</text>]]..\n        [[<text class=\"mediumtext\" y=\"60\" x=\"1%\">Back Cost: ]]..warpmathBack..[[</text>]]..\n        [[<text class=\"mediumtext\" y=\"90\" x=\"1%\" style=\"fill:]]..warpCostColor..[[\">Total: ]]..totalCells..[[</text>]]..\n        [[<text text-anchor=\"end\" class=\"mediumtext\" y=\"30\" x=\"99%\">Weight: ]]..constructWeight..[[ T</text>]]..\n        [[<text text-anchor=\"end\" class=\"mediumtext\" y=\"60\" x=\"99%\">Back Weight: ]]..math.floor(constructWeight+screenObject.extraWeight)..[[ T</text>]]\n    end\n\n    html = html ..[[</svg>]]\n    if screenObject.mapButtonContentId == nill then\n      screenObject.mapButtonContentId = screenObject.screen.addContent(0, 0, html)\n    else\n      screenObject.screen.resetContent(screenObject.mapButtonContentId, html)\n    end\n  end\nend\n\nfunction getPointOnMap(rotationX, rotationY, rotationZ, screenObject, vector)\n  point = {x = vector.x*screenObject.scale - screenObject.mapCenterPoint.x, y = vector.y*screenObject.scale - screenObject.mapCenterPoint.y, z = vector.z*screenObject.scale - screenObject.mapCenterPoint.z}\n\n  point =  matmul(rotationZ, point)\n  point =  matmul(rotationY, point)\n  point =  matmul(rotationX, point)\n  distance = distance * screenObject.scale\n  z = 1 - (point.z)/400\n  --  if z < 0.2 then\n  --    z = 0.2\n  --  end\n  --  if z > 1 then\n  --    z = 1\n  --  end\n  projection = {\n    {1, 0, 0},\n    {0, 1, 0},\n    {0, 0, 1}\n    }\n  point =  matmul(projection, point)\n  return {x = point.x + screenObject.screenCenterX, y = point.y + screenObject.screenCenterY, z = point.z, planet = planet, r = 5}\nend\n\n\nfunction update3d(auto)\n\n  globalLoc = vec3(core.getConstructWorldPos())\n  --  globalLoc = vec3(-94134464.000, 12765536.000, -3634464.000)\n  constructLoc  = {x = globalLoc.x/400000, y = (globalLoc.y/400000), z = globalLoc.z/400000}\n\n  for _,screenObject in ipairs(screens) do\n\n    --    screenObject.mapCenterPoint = {x = globalLoc.x/400000, y = (globalLoc.y/400000), z = globalLoc.z/400000}\n\n    if screenObject.mapViewState ~= 1 then\n      screenObject.screenCenterX = screenWidth / 2\n      screenObject.screenCenterY = screenHeight / 2\n      screenObject.scale = 1.5\n    else\n      screenObject.screenCenterX = screenWidth / 2\n      screenObject.screenCenterY = screenHeight - (screenHeight / 3)\n      screenObject.scale = 1\n    end\n\n    --    if auto then\n    --      screenObject.angle = screenObject.angle + 0.01\n    --      screenObject.pitch = screenObject.pitch + 0.01\n    --      screenObject.yaw = screenObject.yaw + 0.01\n    --    end\n\n    --    screenObject.scale = screenObject.scale + 0.05\n\n    cosX = math.cos(screenObject.angle)\n    sinX = math.sin(screenObject.angle)\n    rotationX = {\n      {1, 0, 0},\n      {0, cosX, -sinX},\n      {0, sinX, cosX}\n      }\n\n    cosY = math.cos(screenObject.pitch)\n    sinY = math.sin(screenObject.pitch)\n    rotationY = {\n      {cosY, 0, -sinY},\n      {0, 1, 0},\n      {sinY, 0, cosY}\n      }\n\n    cosZ = math.cos(screenObject.yaw)\n    sinZ = math.sin(screenObject.yaw)\n    rotationZ = {\n      {cosZ, -sinZ, 0},\n      {sinZ, cosZ, 0},\n      {0, 0, 1}\n      }\n\n    html = style..[[<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 ]]..screenWidth..[[ ]]..screenHeight..[[\">]]\n\n    html = html..[[<rect fill=\"#2C3735\" height=\"]]..screenHeight..[[\" width=\"]]..screenWidth..[[\" y=\"0\" x=\"0\"/>]]\n\n    newPoints = {}\n\n    screenObject.planetScreen = {}\n\n    for i, planet in ipairs(planets) do\n\n      point = {x = planet.mapCoords.x*screenObject.scale - screenObject.mapCenterPoint.x, y = planet.mapCoords.y*screenObject.scale - screenObject.mapCenterPoint.y, z = planet.mapCoords.z*screenObject.scale - screenObject.mapCenterPoint.z}\n\n\n      --      point = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, point)\n\n      point =  matmul(rotationZ, point)\n      point =  matmul(rotationY, point)\n      point =  matmul(rotationX, point)\n\n      distance = orDistance*screenObject.scale\n      z = 1 - (point.z)/400\n      --\n      --      if z < 0.0 then\n      --        z = 0.0\n      --      end\n      --\n      --      if z > 1 then\n      --        z = 1\n      --      end\n\n      projection = {\n        {1, 0, 0},\n        {0, 1, 0},\n        {0, 0, 1}\n        }\n      point =  matmul(projection, point)\n\n      r = 10 - (4 * (point.z + mapSize*screenObject.scale) / distance)\n      font = 3 - (0.8 * (point.z + mapSize*(screenObject.scale+1)) / distance)\n\n      if r < 5 then\n        r = 5\n      end\n      if r > 10 then\n        r = 10\n      end\n\n      --      if font < 2 then\n      --      font = 3\n      --      end\n\n      newPoints[i] = {x = point.x + screenObject.screenCenterX, y = point.y + screenObject.screenCenterY, z = point.z, planet = planet, r = r, font = font}\n\n\n      table.insert(screenObject.planetScreen,planet.button.id, {x = newPoints[i].x, y = newPoints[i].y})\n\n\n      if planet.drawZero then\n        newPoints[i].zeroPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, {x = planet.mapCoords.x, y = planet.mapCoords.y, z = 0})\n      end\n\n    end\n\n    table.sort(newPoints, compare)\n\n    degreeY = -(screenObject.pitch * (180/math.pi))\n    degreeX = screenObject.angle * (180/math.pi)\n    degreeZ = -(screenObject.yaw * (180/math.pi))\n\n    if  degreeY < -360 then\n      screenObject.pitch = 0\n    end\n\n    if  degreeX > 360 then\n      screenObject.angle = 0\n    end\n\n    if  degreeZ > 360 then\n      screenObject.yaw = 0\n    end\n\n    rotationSide = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, {x=0, y = 0, z= 10})\n\n    mapStrokeColor = \"#00eaff\"\n\n    if rotationSide.z < 0 then\n      mapStrokeColor = \"#ffffff\"\n    end\n\n    html = html..[[<g fill=\"none\" stroke-width=\"0.4em\" style=\"stroke: ]]..mapStrokeColor..[[; stroke-opacity: 0.2; fill-opacity:0.3; transform-origin: ]]..toScreenCordsX(screenObject.screenCenterX)..[[% ]]..toScreenCordsY(screenObject.screenCenterY)..[[% 0px;transform: rotateX(]]..degreeX..[[deg) rotateY(]]..degreeY..[[deg) rotateZ(]]..degreeZ..[[deg);\">]]\n    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(300*screenObject.scale)..[[%\"></circle>]]\n    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(250*screenObject.scale)..[[%\"></circle>]]\n    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(200*screenObject.scale)..[[%\"></circle>]]\n    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(150*screenObject.scale)..[[%\"></circle>]]\n    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(100*screenObject.scale)..[[%\"></circle>]]\n    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(50*screenObject.scale)..[[%\"></circle>]]\n    html = html..[[</g>]]\n\n    --    degreeY = degreeY -45\n    --    html = html..[[<circle cx=\"]]..(toScreenCordsX(screenObject.screenCenterX))..[[%\" cy=\"]]..(toScreenCordsY(screenObject.screenCenterY))..[[%\" r=\"]]..toScreenCords(250)..[[%\" fill=\"none\" stroke-width=\"0.8em\" style=\"stroke: ]]..mapStrokeColor..[[; stroke-opacity: 0.6; fill-opacity:0.8; transform-origin: 50% 50% 0px;transform: rotateX(]]..degreeX..[[deg) rotateY(]]..degreeY..[[deg) rotateZ(]]..degreeZ..[[deg);\"></circle>]]\n\n\n    if screenObject.route ~= nill then\n      previousPoint = constructLoc\n      for i, planet in ipairs(screenObject.route) do\n        if planet ~= nill then\n\n          originPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, previousPoint)\n          distinationPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, planet.mapCoords)\n\n          dashArray = \"40 10 30 10 20 10\"\n          if screenObject.timer > 2 then\n            screenObject.timer = 0\n          end\n          screenObject.timer = screenObject.timer + 1\n\n          html = html..[[<line stroke-linecap=\"undefined\" stroke-linejoin=\"undefined\" stroke-dasharray=\"]]..dashArray..[[\" y2=\"]]..toScreenCordsY(distinationPoint.y)..[[%\" x2=\"]]..toScreenCordsX(distinationPoint.x)..[[%\" y1=\"]]..toScreenCordsY(originPoint.y)..[[%\" x1=\"]]..toScreenCordsX(originPoint.x)..[[%\" stroke-opacity=\"0.9\" stroke-width=\"5\" stroke=\"]]..lineColor..[[\" fill=\"none\" fill-opacity=\"0\"/>]]\n\n        end\n        previousPoint = planet.mapCoords\n      end\n    end\n\n    for i, planetPoint in ipairs(newPoints) do\n      if planetPoint.planet ~= nill then\n\n        if planetPoint.zeroPoint ~= nill then\n          html = html..[[<line stroke-linecap=\"undefined\" stroke-linejoin=\"undefined\" y2=\"]]..toScreenCordsY(planetPoint.y)..[[%\" x2=\"]]..toScreenCordsX(planetPoint.x)..[[%\" y1=\"]]..toScreenCordsY(planetPoint.zeroPoint.y)..[[%\" x1=\"]]..toScreenCordsX(planetPoint.zeroPoint.x)..[[%\" stroke-width=\"2\" stroke-opacity=\"0.3\" stroke=\"]]..lineColorZero..[[\" fill=\"none\" fill-opacity=\"0.5\"/>]]\n        end\n\n        html = html..[[<circle cx=\"]]..(toScreenCordsX(planetPoint.x))..[[%\" cy=\"]]..(toScreenCordsY(planetPoint.y))..[[%\" r=\"]]..toScreenCords(planetPoint.r)..[[%\" class=\"circle\" style=\"fill:]]..planetPoint.planet.color..[[; stroke-opacity: 0.5; fill-opacity: 1\"></circle>]]\n        html = html..[[<text x=\"]]..tostring(toScreenCordsX(planetPoint.x))..[[%\" y=\"]]..tostring(toScreenCordsY( planetPoint.y))..[[%\" class=\"minitext\" font-family=\"Arial\" font-size=\"]]..planetPoint.font..[[em\" fill=\"white\">]]..planetPoint.planet.name..[[</text>]]\n      end\n    end\n\n    constructPoint = getPointOnMap(rotationX, rotationY, rotationZ, screenObject, constructLoc)\n    html = html..[[<circle cx=\"]]..(toScreenCordsX(constructPoint.x))..[[%\" cy=\"]]..(toScreenCordsY(constructPoint.y))..[[%\" r=\"]]..toScreenCords(constructPoint.r)..[[%\" class=\"circle\" style=\"fill:#24ff00; stroke: #00eaff; stroke-opacity: 0.5; fill-opacity: 1\"></circle>]]\n\n\n    html = html ..[[</svg>]]\n    if screenObject.mapContentId == nill then\n      screenObject.mapContentId = screenObject.screen.addContent(0, 0, html)\n    else\n      screenObject.screen.resetContent(screenObject.mapContentId, html)\n    end\n  end\nend\n\nfunction evaluateButtons(x, y, pressDown, screen)\n  for _,screenObject in ipairs(screens) do\n    if  screenObject.screen.getId() == screen.getId() then\n\n      screenObject.mouseDown = pressDown\n\n\n      if pressDown then\n        unit.setTimer(\"maprotate\", updateMouseInterval)\n      end\n\n      clickCoordX = x * screenWidth\n      clickCoordY = y * screenHeight\n\n      if not pressDown then\n        screenObject.weightButtonClicked = nill\n      end\n\n      --      if screenObject.mapViewState ~= 1 then\n      for i, planet in ipairs(planets) do\n\n        dpd = screenObject.planetScreen[planet.button.id]\n\n        if clickCoordX > dpd.x-20 and clickCoordX < dpd.x+20 and clickCoordY > dpd.y-20 and clickCoordY < dpd.y+20 and pressDown then\n          if screenObject.selectedPlanet == planet and pressDown then\n            screenObject.selectedPlanet = nill\n          elseif pressDown then\n            screenObject.selectedPlanet = planet\n          end\n          screenObject.changeView = false\n          update3d(false)\n          updateButtons(false)\n          return\n        end\n      end\n      --      end\n\n      if screenObject.mapViewState == 1 then\n        --        for i, v in ipairs(activeMoons) do activeMoons[i] = nil end\n        for i, planet in ipairs(planets) do\n          if clickCoordX > planet.button.x-buttonStrokeHalf and clickCoordX < planet.button.x + buttonWidth+buttonStrokeHalf and clickCoordY > planet.button.y-buttonStrokeHalf and clickCoordY < planet.button.y + buttonHeight+buttonStrokeHalf then\n            if screenObject.selectedPlanet == planet and pressDown then\n              screenObject.selectedPlanet = nill\n            elseif pressDown then\n              screenObject.selectedPlanet = planet\n            end\n          end\n        end\n\n        if screenObject.selectedPlanet ~= nill then\n          if screenObject.selectedPlanet.moons ~= nill then\n            for i, moon in ipairs(screenObject.selectedPlanet.moons) do\n              if clickCoordX > moon.button.x-buttonStrokeHalf and clickCoordX < moon.button.x + buttonWidth+buttonStrokeHalf and clickCoordY > moon.button.y-buttonStrokeHalf and clickCoordY < moon.button.y + buttonHeight+buttonStrokeHalf then\n                screenObject.selectedPlanet = moon\n              end\n            end\n          else\n            for i, moon in ipairs(screenObject.selectedPlanet.sourcePlanet.moons) do\n              if clickCoordX > moon.button.x-buttonStrokeHalf and clickCoordX < moon.button.x + buttonWidth+buttonStrokeHalf and clickCoordY > moon.button.y-buttonStrokeHalf and clickCoordY < moon.button.y + buttonHeight+buttonStrokeHalf then\n                screenObject.selectedPlanet = moon\n              end\n            end\n\n          end\n        end\n\n        if #weightScreenButtons >= 1 then\n          for i, button in ipairs(weightScreenButtons) do\n            if clickCoordX > button.x-buttonStrokeHalf and clickCoordX < button.x + weightButtonWidth+buttonStrokeHalf and clickCoordY > button.y-buttonStrokeHalf and clickCoordY < button.y + buttonHeight+buttonStrokeHalf then\n              if not pressDown then\n                screenObject.extraWeight = screenObject.extraWeight + button.change\n              else\n                screenObject.weightButtonClicked = button\n              end\n            end\n          end\n        end\n      end\n\n      if screenObject.changeView and not pressDown then\n        if screenObject.mapViewState ~= 1 then\n          screenObject.mapViewState = screenObject.mapViewState + 1\n          if screenObject.mapViewState > 4 then\n            screenObject.mapViewState = 1\n          end\n        else\n          if clickCoordX > (screenWidth / 2) - 200 and  clickCoordX < (screenWidth / 2) + 200 and clickCoordY > (screenHeight / 2) and  clickCoordY < (screenHeight / 2) + 200 then\n            screenObject.mapViewState = 2\n          end\n        end\n\n        save(screenObject)\n      end\n\n      update3d(false)\n      updateButtons(false)\n\n      return\n    end\n  end\nend\n\nfunction mapRotate()\n\n  local someOneHolding = false\n\n  for _,screenObject in ipairs(screens) do\n    if screenObject.mouseDown then\n      someOneHolding = true\n      changed = false;\n      if (screenObject.screen.prevMouseX ~= nil and screenObject.screen.getMouseX() > 0 and screenObject.screen.getMouseY() > 0) then\n\n\n        difX = (screenObject.screen.prevMouseX - screenObject.screen.getMouseX()*screenWidth)\n        difY = (screenObject.screen.prevMouseY - screenObject.screen.getMouseY()*screenHeight)\n\n        if (screenObject.screen.getMouseY() > 0.85 and screenObject.mapViewState ~= 1) then\n          if (difX < 20 or difX > -20) then\n            screenObject.yaw = screenObject.yaw + (difX / 100)\n            changed = true\n          end\n          if changed then\n            update3d(false)\n          end\n        elseif (screenObject.screen.getMouseX() < 0.15 and screenObject.mapViewState ~= 1) then\n          if ((difY < 20 or difY > -20) and (difY > 0.5 or difY < -0.5)) then\n            screenObject.angle = screenObject.angle - (difY / 200)\n            changed = true\n          end\n          if changed then\n            update3d(false)\n          end\n        elseif (screenObject.screen.getMouseY() < 0.15 and screenObject.mapViewState ~= 1) then\n          if (difX < 20 or difX > -20) and (difX > 0.5 or difX < -0.5) then\n            screenObject.pitch = screenObject.pitch - (difX / 200)\n            changed = true\n          end\n          if changed then\n            update3d(false)\n          end\n        else\n          if (difX < 20 or difX > -20) and (difX > 0.5 or difX < -0.5) then\n            screenObject.pitch = screenObject.pitch - (difX / 200)\n            changed = true\n          end\n\n          if ((difY < 20 or difY > -20) and (difY > 0.5 or difY < -0.5)) then\n            screenObject.angle = screenObject.angle - (difY / 200)\n            changed = true\n          end\n          if changed then\n            screenObject.changeView = false\n            update3d(false)\n          end\n        end\n      end\n\n\n      if (screenObject.screen.getMouseX() > 0 and screenObject.screen.getMouseY() > 0)then\n        screenObject.screen.prevMouseX = screenObject.screen.getMouseX()*screenWidth\n        screenObject.screen.prevMouseY = screenObject.screen.getMouseY()*screenHeight\n        if (changed) then\n          screenObject.changeView = false\n        end\n      else\n        screenObject.changeView = true\n        screenObject.mouseDown = false\n        screenObject.screen.prevMouseX = nill\n        screenObject.screen.prevMouseY = nill\n      end\n    else\n      save(screenObject)\n      screenObject.changeView = true\n      screenObject.screen.prevMouseX = nill\n      screenObject.screen.prevMouseY = nill\n    end\n  end\n\n  if not someOneHolding then\n    saveAll()\n    unit.stopTimer(\"maprotate\")\n  end\nend\n\nfor _,screenObject in ipairs(screens) do\n  screenObject.screen.clear()\nend\nupdate3d(false)\nupdateButtons(false)\nunit.setTimer(\"spacemap\", updateInterval)\nunit.hide();\n\n\n","filter":{"args":[],"signature":"start()","slotKey":"-1"},"key":"4"}],"methods":[],"events":[]}
